package com.burst.sdk.struct.hw;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_CONNECT_STATUS extends Structure {
	/**
	 * \u901a\u7528\u4e8b\u4ef6<br>
	 * C type : PU_EVENT_COMMON_S
	 */
	public PU_EVENT_COMMON stPuEventCommon;
	/**
	 * \u8bbe\u5907IP<br>
	 * C type : CHAR[16]
	 */
	public byte[] szDeviceIP = new byte[16];
	/** \u8bbe\u5907port */
	public NativeLong ulDevicePort;
	/**
	 * \u8bbe\u5907\u5382\u5546,\u56fa\u5b9a\u4e3a\uff1aHUAWEI PU<br>
	 * C type : CHAR[12]
	 */
	public byte[] szDeviceFac = new byte[12];
	/**
	 * \u8bbe\u5907ID<br>
	 * C type : CHAR[30 + 4]
	 */
	public byte[] szDeviceID = new byte[30 + 4];
	/**
	 * \u8bbe\u5907\u578b\u53f7<br>
	 * C type : CHAR[32]
	 */
	public byte[] szDeviceType = new byte[32];
	/** C type : CHAR[32] */
	public byte[] szReserved = new byte[32];
	public PU_CONNECT_STATUS() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("stPuEventCommon", "szDeviceIP", "ulDevicePort", "szDeviceFac", "szDeviceID", "szDeviceType", "szReserved");
	}
	/**
	 * @param stPuEventCommon \u901a\u7528\u4e8b\u4ef6<br>
	 * C type : PU_EVENT_COMMON_S<br>
	 * @param szDeviceIP \u8bbe\u5907IP<br>
	 * C type : CHAR[16]<br>
	 * @param ulDevicePort \u8bbe\u5907port<br>
	 * @param szDeviceFac \u8bbe\u5907\u5382\u5546,\u56fa\u5b9a\u4e3a\uff1aHUAWEI PU<br>
	 * C type : CHAR[12]<br>
	 * @param szDeviceID \u8bbe\u5907ID<br>
	 * C type : CHAR[30 + 4]<br>
	 * @param szDeviceType \u8bbe\u5907\u578b\u53f7<br>
	 * C type : CHAR[32]<br>
	 * @param szReserved C type : CHAR[32]
	 */
	public PU_CONNECT_STATUS(PU_EVENT_COMMON stPuEventCommon, byte szDeviceIP[], NativeLong ulDevicePort, byte szDeviceFac[], byte szDeviceID[], byte szDeviceType[], byte szReserved[]) {
		super();
		this.stPuEventCommon = stPuEventCommon;
		if ((szDeviceIP.length != this.szDeviceIP.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDeviceIP = szDeviceIP;
		this.ulDevicePort = ulDevicePort;
		if ((szDeviceFac.length != this.szDeviceFac.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDeviceFac = szDeviceFac;
		if ((szDeviceID.length != this.szDeviceID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDeviceID = szDeviceID;
		if ((szDeviceType.length != this.szDeviceType.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDeviceType = szDeviceType;
		if ((szReserved.length != this.szReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserved = szReserved;
	}
	public PU_CONNECT_STATUS(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_CONNECT_STATUS implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_CONNECT_STATUS implements Structure.ByValue {
		
	};
}
