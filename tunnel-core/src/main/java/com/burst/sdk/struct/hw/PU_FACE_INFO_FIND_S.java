package com.burst.sdk.struct.hw;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_FACE_INFO_FIND_S extends Structure {
	/** \u901a\u9053ID */
	public NativeLong ulChannelId;
	/**
	 * \u540d\u5355\u5e93<br>
	 * C type : PU_FACE_LIB_S
	 */
	public PU_FACE_LIB_S stFacelib;
	/**
	 * \u67e5\u8be2\u6761\u4ef6<br>
	 * C type : PU_FACE_FIND_CONDITION_S
	 */
	public FACE_FIND_CONDITION stCondition;
	/** \u67e5\u8be2\u7ed3\u679c\u6570\u76ee */
	public int uFindNum;
	/** \u8d77\u59cb\u67e5\u8be2ID */
	public int uStartIndex;
	/**
	 * \u67e5\u8be2\u7ed3\u679c\u8def\u5f84 \u8bbe\u5907\u4e0a\u662f\u4e00\u4e2ajson\u6587\u4ef6\u8def\u5f84/tmp/mmcblk0/facelist.json\uff0c\u53ef\u4ee5\u5bf9\u5ba2\u6237\u7aef\u4e0d\u53ef\u89c1<br>
	 * C type : CHAR[128 + 1]
	 */
	public byte[] szFindResultPath = new byte[128 + 1];
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public PU_FACE_INFO_FIND_S() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ulChannelId", "stFacelib", "stCondition", "uFindNum", "uStartIndex", "szFindResultPath", "szReserve");
	}
	/**
	 * @param ulChannelId \u901a\u9053ID<br>
	 * @param stFacelib \u540d\u5355\u5e93<br>
	 * C type : PU_FACE_LIB_S<br>
	 * @param stCondition \u67e5\u8be2\u6761\u4ef6<br>
	 * C type : PU_FACE_FIND_CONDITION_S<br>
	 * @param uFindNum \u67e5\u8be2\u7ed3\u679c\u6570\u76ee<br>
	 * @param uStartIndex \u8d77\u59cb\u67e5\u8be2ID<br>
	 * @param szFindResultPath \u67e5\u8be2\u7ed3\u679c\u8def\u5f84 \u8bbe\u5907\u4e0a\u662f\u4e00\u4e2ajson\u6587\u4ef6\u8def\u5f84/tmp/mmcblk0/facelist.json\uff0c\u53ef\u4ee5\u5bf9\u5ba2\u6237\u7aef\u4e0d\u53ef\u89c1<br>
	 * C type : CHAR[128 + 1]<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public PU_FACE_INFO_FIND_S(NativeLong ulChannelId, PU_FACE_LIB_S stFacelib, FACE_FIND_CONDITION stCondition, int uFindNum, int uStartIndex, byte szFindResultPath[], byte szReserve[]) {
		super();
		this.ulChannelId = ulChannelId;
		this.stFacelib = stFacelib;
		this.stCondition = stCondition;
		this.uFindNum = uFindNum;
		this.uStartIndex = uStartIndex;
		if ((szFindResultPath.length != this.szFindResultPath.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szFindResultPath = szFindResultPath;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public PU_FACE_INFO_FIND_S(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_FACE_INFO_FIND_S implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_FACE_INFO_FIND_S implements Structure.ByValue {
		
	};
}
