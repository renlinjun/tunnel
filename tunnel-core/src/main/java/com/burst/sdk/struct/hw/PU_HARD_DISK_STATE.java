package com.burst.sdk.struct.hw;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_HARD_DISK_STATE extends Structure {
	/** \u5b58\u50a8\u7a7a\u95f4\u95e8\u9650\u9650\u989d */
	public NativeLong ulDiskThreshold;
	/** \u786c\u76d8\u72b6\u6001 0-\u6b63\u5e38 */
	public NativeLong ulDiskState;
	/**
	 * \u78c1\u76d8\u4fe1\u606f<br>
	 * C type : PU_HARD_DISK_INFO_S
	 */
	public PU_HARD_DISK_INFO stHardDiskInfo;
	/**
	 * \u9884\u7559\u5b57\u6bb5,szReserved[0]\u8868\u793aDiskID 0\u53f7\u78c1\u76d8\u4e3aSD\u5361\uff0c1\u53f7\u78c1\u76d8\u4e3aEMMC<br>
	 * C type : CHAR[32]
	 */
	public byte[] szReserved = new byte[32];
	public PU_HARD_DISK_STATE() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ulDiskThreshold", "ulDiskState", "stHardDiskInfo", "szReserved");
	}
	/**
	 * @param ulDiskThreshold \u5b58\u50a8\u7a7a\u95f4\u95e8\u9650\u9650\u989d<br>
	 * @param ulDiskState \u786c\u76d8\u72b6\u6001 0-\u6b63\u5e38<br>
	 * @param stHardDiskInfo \u78c1\u76d8\u4fe1\u606f<br>
	 * C type : PU_HARD_DISK_INFO_S<br>
	 * @param szReserved \u9884\u7559\u5b57\u6bb5,szReserved[0]\u8868\u793aDiskID 0\u53f7\u78c1\u76d8\u4e3aSD\u5361\uff0c1\u53f7\u78c1\u76d8\u4e3aEMMC<br>
	 * C type : CHAR[32]
	 */
	public PU_HARD_DISK_STATE(NativeLong ulDiskThreshold, NativeLong ulDiskState, PU_HARD_DISK_INFO stHardDiskInfo, byte szReserved[]) {
		super();
		this.ulDiskThreshold = ulDiskThreshold;
		this.ulDiskState = ulDiskState;
		this.stHardDiskInfo = stHardDiskInfo;
		if ((szReserved.length != this.szReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserved = szReserved;
	}
	public PU_HARD_DISK_STATE(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_HARD_DISK_STATE implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_HARD_DISK_STATE implements Structure.ByValue {
		
	};
}
