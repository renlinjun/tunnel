package com.burst.sdk.struct.hw;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_OPLOG_INFO extends Structure {
	/** C type : PU_TIME_S */
	public PU_TIME stTime;
	/** C type : CHAR[32] */
	public byte[] acUser = new byte[32];
	/** C type : CHAR[16] */
	public byte[] acDeviceIp = new byte[16];
	/** C type : CHAR[100][256] */
	public byte[] acOptDetailDes = new byte[((100) * (256))];
	public NativeLong ulOptObject;
	public NativeLong ulOptResult;
	public NativeLong ulRiskLevel;
	/** C type : CHAR[32] */
	public byte[] szReserved = new byte[32];
	public PU_OPLOG_INFO() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("stTime", "acUser", "acDeviceIp", "acOptDetailDes", "ulOptObject", "ulOptResult", "ulRiskLevel", "szReserved");
	}
	/**
	 * @param stTime C type : PU_TIME_S<br>
	 * @param acUser C type : CHAR[32]<br>
	 * @param acDeviceIp C type : CHAR[16]<br>
	 * @param acOptDetailDes C type : CHAR[100][256]<br>
	 * @param szReserved C type : CHAR[32]
	 */
	public PU_OPLOG_INFO(PU_TIME stTime, byte acUser[], byte acDeviceIp[], byte acOptDetailDes[], NativeLong ulOptObject, NativeLong ulOptResult, NativeLong ulRiskLevel, byte szReserved[]) {
		super();
		this.stTime = stTime;
		if ((acUser.length != this.acUser.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.acUser = acUser;
		if ((acDeviceIp.length != this.acDeviceIp.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.acDeviceIp = acDeviceIp;
		if ((acOptDetailDes.length != this.acOptDetailDes.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.acOptDetailDes = acOptDetailDes;
		this.ulOptObject = ulOptObject;
		this.ulOptResult = ulOptResult;
		this.ulRiskLevel = ulRiskLevel;
		if ((szReserved.length != this.szReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserved = szReserved;
	}
	public PU_OPLOG_INFO(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_OPLOG_INFO implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_OPLOG_INFO implements Structure.ByValue {
		
	};
}
