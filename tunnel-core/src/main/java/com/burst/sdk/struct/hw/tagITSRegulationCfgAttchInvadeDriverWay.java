package com.burst.sdk.struct.hw;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagITSRegulationCfgAttchInvadeDriverWay extends Structure {
	/** \u505c\u7559\u65f6\u95f4\uff080~180ms\uff09 */
	public int nStayTime;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public tagITSRegulationCfgAttchInvadeDriverWay() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("nStayTime", "szReserve");
	}
	/**
	 * @param nStayTime \u505c\u7559\u65f6\u95f4\uff080~180ms\uff09<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public tagITSRegulationCfgAttchInvadeDriverWay(int nStayTime, byte szReserve[]) {
		super();
		this.nStayTime = nStayTime;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public tagITSRegulationCfgAttchInvadeDriverWay(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagITSRegulationCfgAttchInvadeDriverWay implements Structure.ByReference {
		
	};
	public static class ByValue extends tagITSRegulationCfgAttchInvadeDriverWay implements Structure.ByValue {
		
	};
}
