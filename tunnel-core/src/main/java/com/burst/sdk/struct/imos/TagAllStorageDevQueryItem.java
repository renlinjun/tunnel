package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;

import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_DEVICE_CODE_LEN;
import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_IPADDR_LEN;
import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_NAME_LEN;


/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagAllStorageDevQueryItem extends Structure {
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szDevCode = new byte[IMOS_DEVICE_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szDevName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulDevaddrtype;
	/** C type : CHAR[IMOS_IPADDR_LEN] */
	public byte[] szDevAddr = new byte[IMOS_IPADDR_LEN];
	/** C type : int */
	public int ulStoreDevTotalSize;
	/** C type : int */
	public int ulStoreDevUsedSize;
	/** C type : int */
	public int ulIsOnline;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public TagAllStorageDevQueryItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szDevCode", "szDevName", "ulDevaddrtype", "szDevAddr", "ulStoreDevTotalSize", "ulStoreDevUsedSize", "ulIsOnline", "szReserve");
	}
	/**
	 * @param szDevCode C type : CHAR[IMOS_DEVICE_CODE_LEN]<br>
	 * @param szDevName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulDevaddrtype C type : int<br>
	 * @param szDevAddr C type : CHAR[IMOS_IPADDR_LEN]<br>
	 * @param ulStoreDevTotalSize C type : int<br>
	 * @param ulStoreDevUsedSize C type : int<br>
	 * @param ulIsOnline C type : int<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public TagAllStorageDevQueryItem(byte szDevCode[], byte szDevName[], int ulDevaddrtype, byte szDevAddr[], int ulStoreDevTotalSize, int ulStoreDevUsedSize, int ulIsOnline, byte szReserve[]) {
		super();
		if ((szDevCode.length != this.szDevCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevCode = szDevCode;
		if ((szDevName.length != this.szDevName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevName = szDevName;
		this.ulDevaddrtype = ulDevaddrtype;
		if ((szDevAddr.length != this.szDevAddr.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevAddr = szDevAddr;
		this.ulStoreDevTotalSize = ulStoreDevTotalSize;
		this.ulStoreDevUsedSize = ulStoreDevUsedSize;
		this.ulIsOnline = ulIsOnline;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public TagAllStorageDevQueryItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagAllStorageDevQueryItem implements Structure.ByReference {
		
	};
	public static class ByValue extends TagAllStorageDevQueryItem implements Structure.ByValue {
		
	};
}
