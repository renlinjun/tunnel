package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import static com.burst.sdk.constanst.IMOSDefLibrary.*;
import static com.burst.sdk.constanst.SDKDef.IMOS_ARRAY_SLOT_MAXNUM;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagArrayInfo extends Structure {
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szArrayName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulNumber;
	/** C type : int[IMOS_ARRAY_SLOT_MAXNUM] */
	public int[] aulSlotNum = new int[IMOS_ARRAY_SLOT_MAXNUM];
	/** C type : int */
	public int ulArrayType;
	public TagArrayInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szArrayName", "ulNumber", "aulSlotNum", "ulArrayType");
	}
	/**
	 * @param szArrayName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulNumber C type : int<br>
	 * @param aulSlotNum C type : int[IMOS_ARRAY_SLOT_MAXNUM]<br>
	 * @param ulArrayType C type : int
	 */
	public TagArrayInfo(byte szArrayName[], int ulNumber, int aulSlotNum[], int ulArrayType) {
		super();
		if ((szArrayName.length != this.szArrayName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szArrayName = szArrayName;
		this.ulNumber = ulNumber;
		if ((aulSlotNum.length != this.aulSlotNum.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.aulSlotNum = aulSlotNum;
		this.ulArrayType = ulArrayType;
	}
	public TagArrayInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagArrayInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends TagArrayInfo implements Structure.ByValue {
		
	};
}
