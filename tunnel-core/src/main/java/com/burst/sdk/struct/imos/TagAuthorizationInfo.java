package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;

import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_NAME_LEN;
import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_PASSWD_LEN;
import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_STRING_LEN_64;


/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagAuthorizationInfo extends Structure {
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szUserName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_PASSWD_LEN] */
	public byte[] szPassword = new byte[IMOS_PASSWD_LEN];
	/** C type : CHAR[IMOS_STRING_LEN_64] */
	public byte[] szRealm = new byte[IMOS_STRING_LEN_64];
	public TagAuthorizationInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szUserName", "szPassword", "szRealm");
	}
	/**
	 * @param szUserName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szPassword C type : CHAR[IMOS_PASSWD_LEN]<br>
	 * @param szRealm C type : CHAR[IMOS_STRING_LEN_64]
	 */
	public TagAuthorizationInfo(byte szUserName[], byte szPassword[], byte szRealm[]) {
		super();
		if ((szUserName.length != this.szUserName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szUserName = szUserName;
		if ((szPassword.length != this.szPassword.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szPassword = szPassword;
		if ((szRealm.length != this.szRealm.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szRealm = szRealm;
	}
	public TagAuthorizationInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagAuthorizationInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends TagAuthorizationInfo implements Structure.ByValue {
		
	};
}
