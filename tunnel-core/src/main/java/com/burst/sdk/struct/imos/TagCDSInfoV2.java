package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_DEVICE_CODE_LEN;
import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_IPADDR_LEN;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagCDSInfoV2 extends Structure {
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szDevCode = new byte[IMOS_DEVICE_CODE_LEN];
	/** C type : int */
	public int ulDevAddrType;
	/** C type : CHAR[IMOS_IPADDR_LEN] */
	public byte[] szIPAddress = new byte[IMOS_IPADDR_LEN];
	/** C type : int */
	public int ulPort;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public TagCDSInfoV2() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szDevCode", "ulDevAddrType", "szIPAddress", "ulPort", "szReserve");
	}
	/**
	 * @param szDevCode C type : CHAR[IMOS_DEVICE_CODE_LEN]<br>
	 * @param ulDevAddrType C type : int<br>
	 * @param szIPAddress C type : CHAR[IMOS_IPADDR_LEN]<br>
	 * @param ulPort C type : int<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public TagCDSInfoV2(byte szDevCode[], int ulDevAddrType, byte szIPAddress[], int ulPort, byte szReserve[]) {
		super();
		if ((szDevCode.length != this.szDevCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevCode = szDevCode;
		this.ulDevAddrType = ulDevAddrType;
		if ((szIPAddress.length != this.szIPAddress.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szIPAddress = szIPAddress;
		this.ulPort = ulPort;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public TagCDSInfoV2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagCDSInfoV2 implements Structure.ByReference {
		
	};
	public static class ByValue extends TagCDSInfoV2 implements Structure.ByValue {
		
	};
}
