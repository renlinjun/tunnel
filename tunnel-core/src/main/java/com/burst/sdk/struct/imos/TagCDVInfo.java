package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static  com.burst.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagCDVInfo extends Structure {
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szCDVCode = new byte[IMOS_DEVICE_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCDVName = new byte[IMOS_NAME_LEN];
	/**
	 * \u7a7a<br>
	 * C type : int
	 */
	public int ulCDVType;
	/**
	 * \u7a7a<br>
	 * C type : CHAR[IMOS_IPADDR_LEN]
	 */
	public byte[] szDevAddr = new byte[IMOS_IPADDR_LEN];
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szCDMCode = new byte[IMOS_DEVICE_CODE_LEN];
	/** C type : CHAR[IMOS_DESC_LEN] */
	public byte[] szDevDesc = new byte[IMOS_DESC_LEN];
	/**
	 * \u67e5\u8be2\u8fd4\u56de\u7a7a<br>
	 * C type : int
	 */
	public int ulCDVSubType;
	/** C type : CHAR[60] */
	public byte[] szReserve = new byte[60];
	public TagCDVInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szCDVCode", "szCDVName", "ulCDVType", "szDevAddr", "szCDMCode", "szDevDesc", "ulCDVSubType", "szReserve");
	}
	/**
	 * @param szCDVCode C type : CHAR[IMOS_DEVICE_CODE_LEN]<br>
	 * @param szCDVName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulCDVType \u7a7a<br>
	 * C type : int<br>
	 * @param szDevAddr \u7a7a<br>
	 * C type : CHAR[IMOS_IPADDR_LEN]<br>
	 * @param szCDMCode C type : CHAR[IMOS_DEVICE_CODE_LEN]<br>
	 * @param szDevDesc C type : CHAR[IMOS_DESC_LEN]<br>
	 * @param ulCDVSubType \u67e5\u8be2\u8fd4\u56de\u7a7a<br>
	 * C type : int<br>
	 * @param szReserve C type : CHAR[60]
	 */
	public TagCDVInfo(byte szCDVCode[], byte szCDVName[], int ulCDVType, byte szDevAddr[], byte szCDMCode[], byte szDevDesc[], int ulCDVSubType, byte szReserve[]) {
		super();
		if ((szCDVCode.length != this.szCDVCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDVCode = szCDVCode;
		if ((szCDVName.length != this.szCDVName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDVName = szCDVName;
		this.ulCDVType = ulCDVType;
		if ((szDevAddr.length != this.szDevAddr.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevAddr = szDevAddr;
		if ((szCDMCode.length != this.szCDMCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDMCode = szCDMCode;
		if ((szDevDesc.length != this.szDevDesc.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevDesc = szDevDesc;
		this.ulCDVSubType = ulCDVSubType;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public TagCDVInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagCDVInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends TagCDVInfo implements Structure.ByValue {
		
	};
}
