package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static com.burst.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagCDVResInfo extends Structure {
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCDVResName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szCDVResCode = new byte[IMOS_CODE_LEN];
	/** C type : int */
	public int ulCapacity;
	/** C type : int */
	public int ulCDVType;
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szCDVCode = new byte[IMOS_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCDVName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szCDMDevCode = new byte[IMOS_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCDMDevName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public TagCDVResInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szCDVResName", "szCDVResCode", "ulCapacity", "ulCDVType", "szCDVCode", "szCDVName", "szCDMDevCode", "szCDMDevName", "szReserve");
	}
	/**
	 * @param szCDVResName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szCDVResCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param ulCapacity C type : int<br>
	 * @param ulCDVType C type : int<br>
	 * @param szCDVCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param szCDVName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szCDMDevCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param szCDMDevName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public TagCDVResInfo(byte szCDVResName[], byte szCDVResCode[], int ulCapacity, int ulCDVType, byte szCDVCode[], byte szCDVName[], byte szCDMDevCode[], byte szCDMDevName[], byte szReserve[]) {
		super();
		if ((szCDVResName.length != this.szCDVResName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDVResName = szCDVResName;
		if ((szCDVResCode.length != this.szCDVResCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDVResCode = szCDVResCode;
		this.ulCapacity = ulCapacity;
		this.ulCDVType = ulCDVType;
		if ((szCDVCode.length != this.szCDVCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDVCode = szCDVCode;
		if ((szCDVName.length != this.szCDVName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDVName = szCDVName;
		if ((szCDMDevCode.length != this.szCDMDevCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDMDevCode = szCDMDevCode;
		if ((szCDMDevName.length != this.szCDMDevName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCDMDevName = szCDMDevName;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public TagCDVResInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagCDVResInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends TagCDVResInfo implements Structure.ByValue {
		
	};
}
