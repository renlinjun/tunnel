package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_NAME_LEN;
import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_RES_CODE_LEN;
import static com.burst.sdk.constanst.IMOSDefLibrary.IMOS_TIME_LEN;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagChannelTempQueryItem extends Structure {
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szTempletCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szTempletName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_TIME_LEN] */
	public byte[] szLastUpdateTime = new byte[IMOS_TIME_LEN];
	/** C type : int */
	public int ulDevType;
	/** C type : int */
	public int ulEncodeSet;
	/** C type : int */
	public int ulStandard;
	public TagChannelTempQueryItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szTempletCode", "szTempletName", "szLastUpdateTime", "ulDevType", "ulEncodeSet", "ulStandard");
	}
	/**
	 * @param szTempletCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szTempletName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szLastUpdateTime C type : CHAR[IMOS_TIME_LEN]<br>
	 * @param ulDevType C type : int<br>
	 * @param ulEncodeSet C type : int<br>
	 * @param ulStandard C type : int
	 */
	public TagChannelTempQueryItem(byte szTempletCode[], byte szTempletName[], byte szLastUpdateTime[], int ulDevType, int ulEncodeSet, int ulStandard) {
		super();
		if ((szTempletCode.length != this.szTempletCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szTempletCode = szTempletCode;
		if ((szTempletName.length != this.szTempletName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szTempletName = szTempletName;
		if ((szLastUpdateTime.length != this.szLastUpdateTime.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szLastUpdateTime = szLastUpdateTime;
		this.ulDevType = ulDevType;
		this.ulEncodeSet = ulEncodeSet;
		this.ulStandard = ulStandard;
	}
	public TagChannelTempQueryItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagChannelTempQueryItem implements Structure.ByReference {
		
	};
	public static class ByValue extends TagChannelTempQueryItem implements Structure.ByValue {
		
	};
}
