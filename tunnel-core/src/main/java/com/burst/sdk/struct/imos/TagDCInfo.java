package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static com.burst.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagDCInfo extends Structure {
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szDCCode = new byte[IMOS_DEVICE_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szDCName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulDCType;
	/** C type : int */
	public int ulChannum;
	/** C type : int */
	public int ulIsMulticast;
	/** C type : LONG_32 */
	public int lTemperatureMax;
	/** C type : LONG_32 */
	public int lTemperatureMin;
	/** C type : int */
	public int ulEnableAlarm;
	/** C type : CHAR[IMOS_DOMAIN_CODE_LEN] */
	public byte[] szOrgCode = new byte[IMOS_DOMAIN_CODE_LEN];
	/** C type : int */
	public int ulTimeSyncMode;
	/** C type : LONG_32 */
	public int lTimeZone;
	/** C type : int */
	public int ulLanguage;
	/** C type : int */
	public int ulStandard;
	/** C type : int */
	public int ulEncodeSet;
	/** C type : CHAR[IMOS_PASSWD_ENCRYPT_LEN] */
	public byte[] szDevPasswd = new byte[IMOS_PASSWD_ENCRYPT_LEN];
	/** C type : CHAR[IMOS_DESC_LEN] */
	public byte[] szDevDesc = new byte[IMOS_DESC_LEN];
	/** C type : CHAR[IMOS_IPADDR_LEN] */
	public byte[] szDCIPAddr = new byte[IMOS_IPADDR_LEN];
	/** C type : int */
	public int ulIsDCOnline;
	/** C type : int */
	public int ulStreamTransProtocol;
	/** C type : int */
	public int ulStreamServerMode;
	/** C type : int */
	public int ulRegProtocol;
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szRegUserName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_PASSWD_LEN] */
	public byte[] szRegUserPasswd = new byte[IMOS_PASSWD_LEN];
	public short usDCPort;
	/** C type : CHAR[2] */
	public byte[] szReserve = new byte[2];
	public TagDCInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szDCCode", "szDCName", "ulDCType", "ulChannum", "ulIsMulticast", "lTemperatureMax", "lTemperatureMin", "ulEnableAlarm", "szOrgCode", "ulTimeSyncMode", "lTimeZone", "ulLanguage", "ulStandard", "ulEncodeSet", "szDevPasswd", "szDevDesc", "szDCIPAddr", "ulIsDCOnline", "ulStreamTransProtocol", "ulStreamServerMode", "ulRegProtocol", "szRegUserName", "szRegUserPasswd", "usDCPort", "szReserve");
	}
	public TagDCInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagDCInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends TagDCInfo implements Structure.ByValue {
		
	};
}
