package com.burst.sdk.struct.imos;
import com.burst.sdk.constanst.IMOSDefLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import com.burst.sdk.constanst.IMOSDefLibrary;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagAlarmExporter extends Structure {
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szAlarmExporterName = new byte[IMOSDefLibrary.IMOS_NAME_LEN];
	/** C type : int */
	public int ulAlarmExporterType;
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szDevCode = new byte[IMOSDefLibrary.IMOS_DEVICE_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szDevName = new byte[IMOSDefLibrary.IMOS_NAME_LEN];
	/** C type : int */
	public int ulChannelIndex;
	public tagAlarmExporter() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szAlarmExporterName", "ulAlarmExporterType", "szDevCode", "szDevName", "ulChannelIndex");
	}
	/**
	 * @param szAlarmExporterName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulAlarmExporterType C type : int<br>
	 * @param szDevCode C type : CHAR[IMOS_DEVICE_CODE_LEN]<br>
	 * @param szDevName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulChannelIndex C type : int
	 */
	public tagAlarmExporter(byte szAlarmExporterName[], int ulAlarmExporterType, byte szDevCode[], byte szDevName[], int ulChannelIndex) {
		super();
		if ((szAlarmExporterName.length != this.szAlarmExporterName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szAlarmExporterName = szAlarmExporterName;
		this.ulAlarmExporterType = ulAlarmExporterType;
		if ((szDevCode.length != this.szDevCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevCode = szDevCode;
		if ((szDevName.length != this.szDevName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevName = szDevName;
		this.ulChannelIndex = ulChannelIndex;
	}
	public tagAlarmExporter(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagAlarmExporter implements Structure.ByReference {
		
	};
	public static class ByValue extends tagAlarmExporter implements Structure.ByValue {
		
	};
}
