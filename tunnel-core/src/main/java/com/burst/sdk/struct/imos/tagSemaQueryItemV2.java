package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static com.burst.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagSemaQueryItemV2 extends Structure {
	/** C type : SEMA_QUERY_ITEM_S */
	public tagSemaQueryItem stSemaQueryItemInfo;
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szDevCode = new byte[IMOS_CODE_LEN];
	/** C type : CHAR[IMOS_DESC_LEN] */
	public byte[] szSemaDesc = new byte[IMOS_DESC_LEN];
	/** C type : int */
	public int ulAlarmIOEnableFlag;
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szAlarmIOCode = new byte[IMOS_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szAlarmIOName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulEnableDetectFlag;
	/** C type : int */
	public int ulOutputTime;
	/** C type : CHAR[64] */
	public byte[] szReserve = new byte[64];
	public tagSemaQueryItemV2() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("stSemaQueryItemInfo", "szDevCode", "szSemaDesc", "ulAlarmIOEnableFlag", "szAlarmIOCode", "szAlarmIOName", "ulEnableDetectFlag", "ulOutputTime", "szReserve");
	}
	/**
	 * @param stSemaQueryItemInfo C type : SEMA_QUERY_ITEM_S<br>
	 * @param szDevCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param szSemaDesc C type : CHAR[IMOS_DESC_LEN]<br>
	 * @param ulAlarmIOEnableFlag C type : int<br>
	 * @param szAlarmIOCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param szAlarmIOName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulEnableDetectFlag C type : int<br>
	 * @param ulOutputTime C type : int<br>
	 * @param szReserve C type : CHAR[64]
	 */
	public tagSemaQueryItemV2(tagSemaQueryItem stSemaQueryItemInfo, byte szDevCode[], byte szSemaDesc[], int ulAlarmIOEnableFlag, byte szAlarmIOCode[], byte szAlarmIOName[], int ulEnableDetectFlag, int ulOutputTime, byte szReserve[]) {
		super();
		this.stSemaQueryItemInfo = stSemaQueryItemInfo;
		if ((szDevCode.length != this.szDevCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevCode = szDevCode;
		if ((szSemaDesc.length != this.szSemaDesc.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSemaDesc = szSemaDesc;
		this.ulAlarmIOEnableFlag = ulAlarmIOEnableFlag;
		if ((szAlarmIOCode.length != this.szAlarmIOCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szAlarmIOCode = szAlarmIOCode;
		if ((szAlarmIOName.length != this.szAlarmIOName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szAlarmIOName = szAlarmIOName;
		this.ulEnableDetectFlag = ulEnableDetectFlag;
		this.ulOutputTime = ulOutputTime;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public tagSemaQueryItemV2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagSemaQueryItemV2 implements Structure.ByReference {
		
	};
	public static class ByValue extends tagSemaQueryItemV2 implements Structure.ByValue {
		
	};
}
