package com.burst.sdk.struct.imos;
import com.burst.sdk.constanst.IMOSDefLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagStoryPlanQueryItem extends Structure {
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szStorePlanCode = new byte[IMOSDefLibrary.IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szStorePlanName = new byte[IMOSDefLibrary.IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_TIME_LEN] */
	public byte[] szPlanCreateTime = new byte[IMOSDefLibrary.IMOS_TIME_LEN];
	/** C type : int */
	public int ulPlanStatus;
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCamName = new byte[IMOSDefLibrary.IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szOrgName = new byte[IMOSDefLibrary.IMOS_NAME_LEN];
	public tagStoryPlanQueryItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szStorePlanCode", "szStorePlanName", "szPlanCreateTime", "ulPlanStatus", "szCamName", "szOrgName");
	}
	/**
	 * @param szStorePlanCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szStorePlanName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szPlanCreateTime C type : CHAR[IMOS_TIME_LEN]<br>
	 * @param ulPlanStatus C type : int<br>
	 * @param szCamName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szOrgName C type : CHAR[IMOS_NAME_LEN]
	 */
	public tagStoryPlanQueryItem(byte szStorePlanCode[], byte szStorePlanName[], byte szPlanCreateTime[], int ulPlanStatus, byte szCamName[], byte szOrgName[]) {
		super();
		if ((szStorePlanCode.length != this.szStorePlanCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szStorePlanCode = szStorePlanCode;
		if ((szStorePlanName.length != this.szStorePlanName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szStorePlanName = szStorePlanName;
		if ((szPlanCreateTime.length != this.szPlanCreateTime.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szPlanCreateTime = szPlanCreateTime;
		this.ulPlanStatus = ulPlanStatus;
		if ((szCamName.length != this.szCamName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCamName = szCamName;
		if ((szOrgName.length != this.szOrgName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szOrgName = szOrgName;
	}
	public tagStoryPlanQueryItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagStoryPlanQueryItem implements Structure.ByReference {
		
	};
	public static class ByValue extends tagStoryPlanQueryItem implements Structure.ByValue {
		
	};
}
