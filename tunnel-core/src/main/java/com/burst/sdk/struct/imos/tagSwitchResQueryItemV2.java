package com.burst.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
import static com.burst.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagSwitchResQueryItemV2 extends Structure {
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szSwitchResCode = new byte[IMOS_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szSwitchName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_DOMAIN_CODE_LEN] */
	public byte[] szOrgCode = new byte[IMOS_DOMAIN_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szOrgName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulSwitchType;
	public tagSwitchResQueryItemV2() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szSwitchResCode", "szSwitchName", "szOrgCode", "szOrgName", "ulSwitchType");
	}
	/**
	 * @param szSwitchResCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param szSwitchName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szOrgCode C type : CHAR[IMOS_DOMAIN_CODE_LEN]<br>
	 * @param szOrgName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulSwitchType C type : int
	 */
	public tagSwitchResQueryItemV2(byte szSwitchResCode[], byte szSwitchName[], byte szOrgCode[], byte szOrgName[], int ulSwitchType) {
		super();
		if ((szSwitchResCode.length != this.szSwitchResCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSwitchResCode = szSwitchResCode;
		if ((szSwitchName.length != this.szSwitchName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSwitchName = szSwitchName;
		if ((szOrgCode.length != this.szOrgCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szOrgCode = szOrgCode;
		if ((szOrgName.length != this.szOrgName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szOrgName = szOrgName;
		this.ulSwitchType = ulSwitchType;
	}
	public tagSwitchResQueryItemV2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagSwitchResQueryItemV2 implements Structure.ByReference {
		
	};
	public static class ByValue extends tagSwitchResQueryItemV2 implements Structure.ByValue {
		
	};
}
