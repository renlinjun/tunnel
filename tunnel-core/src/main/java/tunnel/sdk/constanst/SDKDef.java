package tunnel.sdk.constanst;

/**
 * @描述:
 * @作者: REN
 * @时间: 2019/1/3 15:28
 */
/**
 * JNA Wrapper for library <b>sdk_def</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface SDKDef {
    //public static final String JNA_LIBRARY_NAME = "sdk_def";
    //public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Sdk_defLibrary.JNA_LIBRARY_NAME);
    //public static final Sdk_defLibrary INSTANCE = (Sdk_defLibrary)Native.loadLibrary(Sdk_defLibrary.JNA_LIBRARY_NAME, Sdk_defLibrary.class);
    /** enum values */
    public static interface tagIMOSThruLineDirection {
        /**
         * < \u987a\u65f6\u9488<br>
         * <i>native declaration : line 752</i>
         */
        public static final int IMOS_THRU_LINE_DIRECTION_CLOCKWISE = 0;
        /**
         * < \u9006\u65f6\u9488<br>
         * <i>native declaration : line 753</i>
         */
        public static final int IMOS_THRU_LINE_DIRECTION_ANTICLOCKWISE = 1;
        /**
         * < \u53cc\u5411<br>
         * <i>native declaration : line 754</i>
         */
        public static final int IMOS_THRU_LINE_DIRECTION_ALL = 2;
        /** <i>native declaration : line 756</i> */
        public static final int IMOS_THRU_LINE_DIRECTION_MAX = 3;
        /** <i>native declaration : line 757</i> */
        public static final long IMOS_THRU_LINE_DIRECTION_INVALID = 0XFFFFFFFFL;
    };
    /** enum values */
    public static interface tagIMOSAreaDirection {
        /**
         * < In<br>
         * <i>native declaration : line 767</i>
         */
        public static final int IMOS_AREA_DIRECTION_IN = 0;
        /**
         * < Out<br>
         * <i>native declaration : line 768</i>
         */
        public static final int IMOS_AREA_DIRECTION_OUT = 1;
        /**
         * < \u53cc\u5411<br>
         * <i>native declaration : line 769</i>
         */
        public static final int IMOS_AREA_DIRECTION_ALL = 2;
        /** <i>native declaration : line 771</i> */
        public static final int IMOS_AREA_DIRECTION_MAX = 3;
        /** <i>native declaration : line 772</i> */
        public static final long IMOS_AREA_DIRECTION_INVALID = 0XFFFFFFFFL;
    };

    /** 卡口类型枚举 */
    public static interface  tagTollgateType {
        public static final int TOLLGATE_TYPE_PUBLIC_SECURITY   = 0;        //治安卡口
        public static final int TOLLGATE_TYPE_TOLL_STATION      = 1;             //收费站
        public static final int TOLLGATE_TYPE_PARK              = 2;            /**< 停车场 */
        public static final int TOLLGATE_TYPE_CIQ               = 3;            /**< 海关 */
        public static final int TOLLGATE_TYPE_E_POLICE          = 4;            /**< 电警 */
        public static final int TOLLGATE_TYPE_MOBILE_E_POLICE   = 5;            /**< 移动电警 */
        public static final int TOLLGATE_TYPE_VIOLATE_PARK_BALL = 6;            /**< 违停球 */
        public static final int TOLLGATE_TYPE_PERSON_FACE       = 7;            /**<人脸卡口 */
        public static final int TOLLGATE_TYPE_SPACESPEED        = 8;			/**< 区间卡口*/
        public static final int TOLLGATE_TYPE_MAX = Integer.MAX_VALUE;          /**< 最大值 */
        public static final int TOLLGATE_TYPE_INVALID         = 0xFFFF;          /**< 无效值 */

    };

    /**
     *
     * 功能描述: 推送类型枚举
     *
     * @auther:
     * @date:
     * @param:
     * @return:
     */
    public static interface tagSubscribePushType {
        public static final int SUBSCRIBE_PUSH_TYPE_ALL          = 0;   /**< 接受告警推送和设备状态推送 */
        public static final int SUBSCRIBE_PUSH_TYPE_ALARM        = 1;   /**< 只接收告警推送 */
        public static final int SUBSCRIBE_PUSH_TYPE_ALARM_STATUS = 2;   /**< 只接收设备状态推送 */

        public static final int SUBSCRIBE_PUSH_TYPE_MAX = Integer.MAX_VALUE;
        public static final int SUBSCRIBE_PUSH_TYPE_INVALID = 0xFFFFFFFF;
    };

    /** 流配置策略类型 */
    public static interface  tagIMOSFavoriteStream {
      public static final int IMOS_FAVORITE_STREAM_ANY        = 0;        /**< 不指定 */
      public static final int   IMOS_FAVORITE_STREAM_PRIMARY  = 1;      /**< 指定主流 */
      public static final int IMOS_FAVORITE_STREAM_SECONDERY  = 2;        /**< 指定辅流 */
      public static final int IMOS_FAVORITE_STREAM_THIRD      = 3;        /**< 指定三流 */
      public static final int IMOS_FAVORITE_STREAM_FOURTH     = 4;        /**< 指定四流 */
      public static final int IMOS_FAVORITE_STREAM_FIFTH      = 5;        /**< 指定五流 */
      public static final int IMOS_FAVORITE_STREAM_BI_AUDIO   = 6;        /**< 指定语音对讲 */
      public static final int IMOS_FAVORITE_STREAM_VOICE_BR   = 7;        /**< 指定语音广播 */
      public static final int IMOS_FAVORITE_STREAM_BUTT = Integer.MAX_VALUE;
      public static final int IMOS_FAVORITE_STREAM_INVALID    = 0xFFFF;    /**< 无效值 */
    };

    /** 呼叫服务操作原因码 */
    public static interface tagCSOperateCode {
        public static final int USER_OPERATE_SERVICE = 0;           /**< 用户主动发起操作 */
        /*****************服务器主动发起的动作类型(开始)*******************/
        public static final int SWITCH_OPERATE              = 1;    /**< 轮切操作 */
        public static final int PLAN_SWITCH_OPERATE         = 2;    /**< 计划轮切操作 */
        public static final int SERVICE_REAVE               = 3;    /**< 业务抢占 */
        public static final int ALARM_LINKAGE_START_SERVICE = 4;    /**< 告警联动 */
        public static final int EXT_DOMAIN_OPER_SERVICE     = 5;    /**< 外域发起操作 */

        public static final int EC_ONLINE                   = 6;    /**< EC上线 */
        public static final int EC_OFFLINE                  = 7;    /**< EC下线 */
        public static final int EC_DELETE                   = 8;    /**< EC删除 */
        public static final int CAMERA_ONLINE               = 9;  /**< 摄像机上线 */
        public static final int CAMERA_OFFLINE              = 10;   /**< 摄像机下线 */

        public static final int DC_ONLINE                   = 11;   /**< DC上线 */
        public static final int DC_OFFLINE                  = 12;   /**< DC下线 */
        public static final int DC_DELETE                   = 13;   /**< DC删除 */

        public static final int MS_ONLINE                   = 14;   /**< MS上线 */
        public static final int MS_OFFLINE                  = 15;   /**< MS下线 */
        public static final int MS_OFFLINE_TRANSFER         = 16;   /**< MS下线引起的转移 */
        public static final int MS_DELETE_TRANSFER          = 17;   /**< MS删除引起的转移 */
        public static final int MS_DELETE                   = 18;   /**< MS删除 */

        public static final int VX500_ONLINE                = 19;   /**< VX500上线 */
        public static final int VX500_OFFLINE               = 20;   /**< VX500下线 */
        public static final int VX500_DELETE                = 21;   /**< VX500删除 */
        public static final int ISC_ONLINE                  = 22;   /**< ISC3000-E上线 */
        public static final int ISC_OFFLINE                 = 23;   /**< ISC3000-E下线 */

        public static final int EX_DOMAIN_JUNIOR_ONLINE     = 24;   /**< 下级域上线 */
        public static final int EX_DOMAIN_SUPERIOR_ONLINE   = 25;   /**< 上级域上线 */
        public static final int EX_DOMAIN_JUNIOR_OFFLINE    = 26;   /**< 下级域下线 */
        public static final int EX_DOMAIN_SUPERIOR_OFFLINE  = 27;   /**< 上级域下线 */
        public static final int EXT_DOMAIN_DELETE           = 28;   /**< 外域删除 */

        public static final int EXT_DOM_CANCEL_SHR_CAM    = 29;   /**< 外域取消共享摄像机给本域 */
        public static final int LOC_DOM_CANCEL_SHR_CAM      = 30;   /**< 本域取消共享摄像机给外域 */

        public static final int CAMERA_DELETE               = 31;   /**< CAMERA删除 */
        public static final int MONITOR_DELETE              = 32;   /**< MONITOR删除 */

        public static final int SWITCH_RES_MDF              = 33;   /**< 轮切资源修改 */
        public static final int SWITCH_RES_DEL              = 34;   /**< 轮切资源删除 */
        public static final int SWITCH_PLAN_DEL             = 35;   /**< 轮切计划删除 */
        public static final int SWITCH_PLAN_MODIFY          = 36;   /**< 轮切计划修改 */

        public static final int XP_ONLINE                   = 37;   /**< XP上线 */
        public static final int XP_OFFLINE                  = 38;   /**< XP下线 */
        public static final int USER_KEEPALIVE_FAIL         = 39;   /**< 用户保活失败 */
        public static final int USER_DELETE                 = 40;   /**< 用户被删除 */
        public static final int USER_QUIT                   = 41;   /**< 用户退出 */
        public static final int USER_KICKED_OUT             = 42;   /**< 用户被强制下线 */

        public static final int SYSMANGER_OPERATE_SERVICE   = 43;   /**< 管理员操作 */
        public static final int PTZ_LINK_TIMER_OUT          = 44;   /**< 云台连接超时 */
        public static final int PTZ_FIRST_LINK              = 45;   /**< 云台首次连接 */
        public static final int PTZ_LOW_AUTHORITY           = 46;   /**< 云台控制权限低 */
        public static final int PTZ_NO_AUTHORITY            = 47;   /**< 无云台控制权限 */
        public static final int PTZ_HAS_LOCKED              = 48;   /**< 云台被锁定 */

        public static final int DEV_MEDIA_PARAM_CHANGE      = 49;   /**< 设备媒体参数修改 */

        public static final int SALVO_OPERATE               = 50;   /**< 组显示操作 */

        public static final int SALVO_RES_DEL               = 51;   /**< 组显示删除 */
        public static final int SALVO_RES_MDF               = 52;   /**< 组显示修改 */

        public static final int GROUPSWITCH_RES_DEL         = 53;   /**< 组轮巡资源删除 */
        public static final int GROUPSWITCH_RES_MDF         = 54;   /**< 组轮巡资源修改 */

        public static final int GROUPSWITCH_PLAN_DEL        = 55;   /**< 组轮巡计划删除 */
        public static final int GROUPSWITCH_PLAN_MODIFY     = 56;   /**< 组轮巡计划修改 */

        public static final int GROUPSALVO_OPERATE          = 57;   /**< 组轮巡操作 */
        public static final int GROUPSALVO_STOP             = 58;   /**< 组轮巡停止 */
        public static final int GROUPSALVO_PLAN_OPERATE     = 59;   /**< 组轮巡计划操作 */

        public static final int INTERNAL_ERR_OPERATE        = 60;   /**< 内部错误引起操作 */

        public static final int PTZ_CCB_FULL                = 61;   /**< 控制块已满 */

        public static final int MONITOR_SPLIT_SCREEN_DELETE = 62;   /**< 监视器分屏删除 */
        public static final int MONITOR_SPLIT_SCREEN_SWITCH = 63; /**< 监视器分屏切换 */

        public static final int ALARM_LINKAGE_RESUME_SERVICE = 64;  /**< 告警联动恢复 */
        public static final int MONITOR_SPLIT_SCREEN_SWITCH_STOP = 65; /**< 监视器分屏切换引起的"停止业务"操作 */
        public static final int  MONITOR_SPLIT_SCREEN_SWITCH_START = 66; /**< 监视器分屏切换引起的"启动业务"操作 */
        public static final int MONITOR_SPLIT_SCREEN_SWITCH_START_FULL = 67; /**< 监视器分屏切换引起的"启动业务"操作 - 切至全屏 */
        public static final int  MONITOR_SPLIT_SCREEN_SWITCH_START_EXIT = 68; /**< 监视器分屏切换引起的"启动业务"操作 - 退出全屏 */

        public static final int CALLEE_USER_OPERATE_SERVICE = 70;   /**< 被叫用户发起操作 */
        public static final int SYSTEM_OPERATE_SERVICE      = 71;   /**< 系统发起操作 */
        public static final int CALLEE_NOT_SUPPORT_SERVICE  = 72;   /**< 被叫不支持此业务操作 */

        public static final int EXDOMAIN_CRUISE_PATH_DELETE  = 73;   /**< 跨域巡航路线删除 */

        public static final int TS_OFFLINE                   = 74;   /**< TS下线 */
        public static final int TS_OFFLINE_TRANSFER          = 75;   /**< TS下线引起的转移 */
        public static final int TS_DELETE_TRANSFER           = 76;   /**< TS删除引起的转移 */
        public static final int TS_DELETE                    = 77;   /**< TS删除 */
        public static final int TS_ONLINE                    = 78;   /**< TS上线 */
        public static final int VOD_OFFLINEORDELETE          = 79;   /**< VOD服务器离线或删除 */
        /* Begin Added by dengshuhua00673, 2012-11-27 of 自动布局轮巡 */
        public static final int AUTOSALVO_OPERATE            = 80;   /**< 自动布局组轮巡操作 */
        public static final int AUTOSALVO_STOP               = 81;   /**< 自动布局组轮巡停止 */
        public static final int AUTOSWITCH_RES_MDF           = 82;   /**< 自动布局组轮巡资源修改 */
        public static final int AUTOSWITCH_RES_DEL           = 83;   /**< 自动布局组轮巡资源删除 */
        /* End Added by dengshuhua00673, 2012-11-27 of 自动布局轮巡 */

        public static final int DC_CONFIGURE_DC_INST         = 84;   /**< 设置DC拼接、模拟输入等信息 */

        /* Begin: added by zkf0134, 2013.11.23 for 分屏切换支持主辅流自适应*/
        public static final int MONITOR_SWITCH_SPLIT_SCREEN_START = 85;   /**< 监视器分屏切换引起的"启动业务操作"*/
        /* End: added by zkf0134, 2013.11.23 for 分屏切换支持主辅流自适应*/

        public static final int PLAN_GUARD_OPERATE   =  86;/**<计划看守操作*/
        public static final int LS_OFFLINE                   = 87;   /**< LS下线 */
        public static final int LS_OFFLINE_TRANSFER          = 88;   /**< LS下线引起的转移 */
        public static final int LS_DELETE_TRANSFER           = 89;   /**<LS删除引起的转移 */
        public static final int LS_DELETE                    = 90;   /**< LS删除 */
        public static final int LS_ONLINE                    = 91;   /**< LS上线 */

        public static final int VOD_ONLINE                   = 92;   /**< VOD上线 */
        public static final int VOD_OFFLINE                  = 93;   /**< VOD下线 */
        public static final int VOD_OFFLINE_TRANSFER         = 94;   /**< VOD下线引起的转移 */
        public static final int VOD_DELETE_TRANSFER          = 95;   /**< VOD删除引起的转移 */
        public static final int VOD_DELETE                   = 96;   /**<VOD删除 */

        public static final int TS_RULE_CHANGE               = 97;   /**< TS规则改变 */
        /* Begin: added by y01359, 2015-01-28 for A8 */
        public static final int A8_ONLINE                    = 98;  /**< A8上线 */
        public static final int A8_OFFLINE                   = 99; /**< A8下线 */
        public static final int A8_DELETE                    = 100;  /**< A8删除 */
        public static final int A8_WINDOW_DELETE             = 101;  /**< A8窗口删除 */
        /* End: added by y01359, 2015-01-28 for A8 */

        public static final int STREAM_REBUILD               = 102; /**<VM检测到异常后主动重建流 */

        /* Begin: added by y01359, 2016-05-13 for A8 */
        public static final int A8_SCENE_SERVICE             = 103;  /**< A8场景操作 */
        public static final int A8_WINDOW_SPLIT              = 104;  /**< A8窗口分屏 */
        /* End: added by y01359, 2015-01-28 for A8 */

        /* Begin add by zhuzhicong/02302/代傅晓合入, 2017-07-03 for MPPD48388 XWARE接入平台 */
        public static final int XWARE_ONLINE                 = 105;    /**< XWARE上线 */
        public static final int XWARE_OFFLINE                = 106;    /**< XWARE下线 */
        public static final int XWARE_DELETE                 = 107;    /**< XWARE删除 */
        /* End add by zhuzhicong/02302/代傅晓合入, 2017-07-03 for MPPD48388 XWARE接入平台 */

        /* Begin add by f03368, 2017-06-17 for 新国标检测语音输出设备 */
        public static final int AUDIO_OUTPUT_ONLINE       = 108;     /**< 语音输出上线 */
        public static final int AUDIO_OUTPUT_OFFLINE      = 109;     /**< 语音输出下线 */
        public static final int AUDIO_OUTPUT_DELETE        = 110;     /**< 语音输出删除 */
        public static final int EXT_DOM_CANCEL_SHR_AUDIO_OUTPUT      = 111;   /**< 外域取消共享语音输出给本域 */
        public static final int LOC_DOM_CANCEL_SHR_AUDIO_OUTPUT      = 112;   /**< 本域取消共享语音输出给外域 */
        /* End add by f03368, 2017-06-17 for 新国标检测语音输出设备 */
        /* Begin: Added by chenmenglin 04110, 2017-09-02 for MPPD54245 A8拼控设备轮巡特性 */
        public static final int AUTOPOLL_OPERATE             = 113;   /** A8拼控自动布局轮巡操作*/
        /* End: Added by chenmenglin 04110, 2017-09-02 for MPPD54245 A8拼控设备轮巡特性 */

        /* Begin: Added by liucanming 03903, 2017-09-02 for MPPD54245 A8拼控设备轮巡特性 */
        public static final int GROUPPOLL_RES_DEL            = 114;   /**< A8组轮巡资源删除 */
        public static final int GROUPPOLL_RES_MDF            = 115;   /**< A8组轮巡资源修改 */
        public static final int AUTOPOLL_RES_MDF             = 116;   /**< A8自动布局轮巡资源修改 */
        public static final int AUTOPOLL_RES_DEL             = 117;   /**< A8自动布局轮巡资源删除 */
        /* End: Added by liucanming 03903, 2017-09-02 for MPPD54245 A8拼控设备轮巡特性 */
        /*****************服务器主动发起的动作类型(结束)*******************/
        //TODO 不知道MAX应该赋什么值
        public static final int CS_OPERATE_CODE_MAX = Integer.MAX_VALUE;
        public static final int CS_OPERATE_CODE_INVALID = 0xFF;

    };

    /** enum values */
    public static interface tagOptionName {
        /**
         * < CC\u7684\u670d\u52a1\u5668\u5730\u5740, \u5bf9\u5e94\u7ed3\u6784 : (CHAR *)<br>
         * <i>native declaration : line 782</i>
         */
        public static final int OPTION_NAME_CC_SERVER_ADDR = 0;
        /**
         * < IMOSROOT\u73af\u5883\u53d8\u91cf, \u5bf9\u5e94\u7ed3\u6784 : (CHAR *)<br>
         * <i>native declaration : line 783</i>
         */
        public static final int OPTION_IMOS_ROOT_PATH = 1;
        /**
         * < \u534f\u8bae\u7684\u7aef\u53e3\u8303\u56f4, \u5bf9\u5e94\u7ed3\u6784 : (PORT_RANGE_S *)<br>
         * <i>native declaration : line 784</i>
         */
        public static final int OPTION_PROTOCOL_PORT_RANGE = 2;
        /**
         * < \u5a92\u4f53\u6d41\u7684\u7aef\u53e3\u8303\u56f4,\u5bf9\u5e94\u7ed3\u6784 : (PORT_RANGE_S *)<br>
         * <i>native declaration : line 785</i>
         */
        public static final int OPTION_MEDIA_PORT_RANGE = 3;
        /**
         * < IMG\u7684\u670d\u52a1\u5668\u7aef\u53e3, \u5bf9\u5e94\u7ed3\u6784 : (USHORT)<br>
         * <i>native declaration : line 786</i>
         */
        public static final int OPTION_NAME_SERVER_IMG_PORT = 4;
        /** <i>native declaration : line 788</i> */
        public static final int OPTION_NAME_MAX = 5;
        /** <i>native declaration : line 789</i> */
        public static final long OPTION_NAME_INVALID = 0XFFFFFFFFL;
    };
    /** enum values */
    public static interface TagCallBackProcType {
        /**
         * 设备状态，对应结构 : AS_STAPUSH_UI_S
         * <i>native declaration : line 809</i>
         */
        public static final int PROC_TYPE_DEV_STATUS = 0;
        /**
         * 告警，对应结构 : AS_ALARMPUSH_UI_S
         * <i>native declaration : line 810</i>
         */
        public static final int PROC_TYPE_ALARM = 1;
        /**
         * < 共享摄像机，对应结构 : CS_MONITOR_REAVE_NOTIFY_S>
         * <i>native declaration : line 811</i>
         */
        public static final int PROC_TYPE_DEV_CAM_SHEAR = 2;
        /**
         * < 实况被抢占，对应结构  : CS_MONITOR_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 812</i>
         */
        public static final int PROC_TYPE_MONITOR_BE_REAVED = 3;
        /**
         * < 轮切被抢占，对应结构 : CS_SWITCH_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 813</i>
         */
        public static final int PROC_TYPE_SWITCH_BE_REAVED = 4;
        /**
         * < 实况被停止，对应结构: CS_MONITOR_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 814</i>
         */
        public static final int PROC_TYPE_MONITOR_BE_STOPPED = 5;
        /**
         * < 轮切被停止，对应结构 : CS_SWITCH_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 815</i>
         */
        public static final int PROC_TYPE_SWITCH_BE_STOPPED = 6;
        /**
         * < 语音被抢占，对应结构：CS_VOCSRV_REAVE_NOTIFY_S
         * <i>native declaration : line 816</i>
         */
        public static final int PROC_TYPE_VOCSRV_BE_REAVED = 7;
        /**
         * < 云台事件通知，对应结构:CS_PTZ_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 817</i>
         */
        public static final int PROC_TYPE_PTZ_EVENT = 8;
        /**
         * <故障处理通知，对应结构 : CS_NOTIFY_UI_TRB_EVENT_PROC_S<br>
         * <i>native declaration : line 818</i>
         */
        public static final int PROC_TYPE_TRB_PROC = 9;
        /**
         * 故障恢复业务建立通知，对应结构: CS_NOTIFY_UI_SRV_SETUP_S<br>
         * <i>native declaration : line 819</i>
         */
        public static final int PROC_TYPE_SRV_SETUP = 10;
        /**
         * 告警联动到XP窗格通知，对应结构: CS_NOTIFY_UI_SRV_SETUP_S<br>
         * <i>native declaration : line 820</i>
         */
        public static final int PROC_TYPE_XP_ALARM_SETUP = 11;
        /**
         * <退出登陆，对应结构 :\u65e0<br>
         * <i>native declaration : line 822</i>
         */
        public static final int PROC_TYPE_LOGOUT = 12;
        /**
         * 媒体参数改变，对应结构 : CS_NOTIFY_UI_MEDIA_PARAM_CHANGE_PROC_S<br>
         * <i>native declaration : line 824</i>
         */
        public static final int PROC_TYPE_MEDIA_PARAM_CHANGE = 13;
        /**
         * 外域状态，对应结构  : AS_EXDOMAIN_STAPUSH_UI_S<br>
         * <i>native declaration : line 826</i>
         */
        public static final int PROC_TYPE_EXDOMAIN_STATUS = 14;
        /**
         * < 信息备份完成通知, 对应结构 : CS_BACKUP_FINISH_INFO_S<br>
         * <i>native declaration : line 828</i>
         */
        public static final int PROC_TYPE_BACKUP_DATA_FINISH = 15;
        /**
         *  透明通道事件通知，对应结构  : CS_TL_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 830</i>
         */
        public static final int PROC_TYPE_TL_EVENT = 16;
        /**
         * 组显示单元事件通知, 对应结构: CS_NOTIFY_SALVO_UNIT_EVENT_S<br>
         * <i>native declaration : line 832</i>
         */
        public static final int PROC_TYPE_SALVO_UNIT_EVENT = 17;
        /**
         * 组切业务事件通知, 对应结构 : CS_NOTIFY_UI_SALVO_EVENT_S<br>
         * <i>native declaration : line 833</i>
         */
        public static final int PROC_TYPE_SALVO_EVENT = 18;
        /**
         * 通知UI启动组轮巡的组显示, 对应结构: CS_NOTIFY_START_XP_SALVO_S<br>
         * <i>native declaration : line 834</i>
         */
        public static final int PROC_TYPE_START_XP_SALVO = 19;
        /**
         *  通知回放上墙被抢占，对应结构：CS_VODWALL_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 836</i>
         */
        public static final int PROC_TYPE_VODWALL_BE_REAVED = 20;
        /**
         * 通知回放上墙被停止，对应结构：CS_VODWALL_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 837</i>
         */
        public static final int PROC_TYPE_VODWALL_BE_STOPPED = 21;
        /**
         * 回放被抢占，对应结构 :  CS_VOD_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 839</i>
         */
        public static final int PROC_TYPE_VOD_BE_REAVED = 22;
        /**
         * 域间同步的结果，对应结构 : AS_DOMAIN_SYN_PUSHUI_S<br>
         * <i>native declaration : line 841</i>
         */
        public static final int PROC_TYPE_DOMAIN_SYN_RESULT = 23;
        /**
         *客户端语音请求，对应结构 : CS_VOC_REQ_NOTIFY_S<br>
         * <i>native declaration : line 843</i>
         */
        public static final int PROC_TYPE_VOC_REQ = 24;
        /**
         * 语音业务状态通知，对应结构 : CS_VOC_STATE_NOTIFY_S<br>
         * <i>native declaration : line 844</i>
         */
        public static final int PROC_TYPE_VOC_STATE_NOTIFY = 25;
        /**
         * 预案告警变化上报，对应结构：PLAN_ALARM_CHG_PUSH_UI_S<br>
         * <i>native declaration : line 846</i>
         */
        public static final int PROC_TYPE_PLAN_ALARM_CHG_REPORT = 26;
        /**
         *  系统级别信息变化上报，对应结构：EVENT_SECURITY_CHG_PUSH_UI_S<br>
         * <i>native declaration : line 847</i>
         */
        public static final int PROC_TYPE_EVENT_SECURITY_CHG_REPORT = 27;
        /**
         * 通知人机Preview用户OSD变更，对应结构:  AS_NOTIFY_OSD_NAME_UI_S<br>
         * <i>native declaration : line 848</i>
         */
        public static final int PROC_TYPE_OSD_NAME_CHANGED = 30;
        /**
         * 通知人机Preview用户遮挡区域变更，对应结构: AS_NOTIFY_EC_MASK_AREA_UI_S<br>
         * <i>native declaration : line 849</i>
         */
        public static final int PROC_TYPE_MASK_AREA_CHANGED = 31;
        /**
         * 云台状态变更通知，对应结构  : CS_PTZ_STATUS_NOTIFY_S<br>
         * <i>native declaration : line 851</i>
         */
        public static final int PROC_TYPE_PTZ_STATUS_EVENT = 32;
        /**
         * 删除外域结果，对应结构: AS_DEL_EXDOMAIN_PUSH_UI_S<br>
         * <i>native declaration : line 852</i>
         */
        public static final int PROC_TYPE_DEL_EXDOMAIN_RESULT = 33;
        /**
         *  通知UI启动自动布局组轮巡, 对应结构:  CS_NOTIFY_START_XP_AUTOSALVO_S<br>
         * <i>native declaration : line 854</i>
         */
        public static final int PROC_TYPE_START_XP_AUTOSALVO = 34;
        /**
         * 透明通道上行透传消息给第三方
         * <i>native declaration : line 857</i>
         */
        public static final int PROC_TYPE_GET_CHANNEL_MSG_FROM_CS_TO_UI = 35;
        /**
         * 通知实时车辆信息，对应结构:VEHICLE_REAL_TIME_DATA_S<br>
         * <i>native declaration : line 861</i>
         */
        public static final int PROC_TYPE_VEHICLE_DATA = 90;
        /**
         * < 通知实时车辆报警，对应结构:VEHICLE_ALARM_DATA_S<br>
         * <i>native declaration : line 862</i>
         */
        public static final int PROC_TYPE_VEHICLE_ALARM_DATA = 91;
        /**
         *通知GIS设备状态变化，对应结构：uff1aDEVICE_GIS_STATUS_DATA_S<br>
         * <i>native declaration : line 863</i>
         */
        public static final int PROC_TYPE_GIS_DEV_STATUS = 92;
        /**
         * < \u7535\u5b50\u516c\u544a\u53d8\u5316\u4e0a\u62a5\uff0c\u5bf9\u5e94\u7ed3\u6784\uff1aELEC_BULLETIN_PUSH_UI_S<br>
         * <i>native declaration : line 865</i>
         */
        public static final int PROC_TYPE_ELEC_BULLETIN_CHANGE = 93;
        /**
         * < \u53d1\u8a00\u7533\u8bf7\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aCONF_SITE_INFO_EX_S<br>
         * <i>native declaration : line 870</i>
         */
        public static final int PROC_TYPE_ACCEPT_SPEAK_YESORNO = 100;
        /**
         * < \u4f1a\u8bae\u72b6\u6001\u6539\u53d8\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aCONF_STATUS_INFO_EX_S \u5982\u679c\u662f\u5468\u671f\u4f1a\u8bae\u4e14\u975e\u6700\u540e\u4e00\u4e2a\u5468\u671f\uff0c\u4e0a\u62a5\u4f1a\u8bae\u672a\u5f00\u59cb/\u5176\u5b83\u4e0a\u62a5\u4f1a\u8bae\u5df2\u7ecf\u7ed3\u675f<br>
         * <i>native declaration : line 871</i>
         */
        public static final int PROC_TYPE_CONF_STATUS_CHANGE = 101;
        /**
         * < \u8bbe\u5907\u7f16\u7801\u6539\u53d8\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aDEVICE_CODE_CHANGE_INFO_EX_S<br>
         * <i>native declaration : line 872</i>
         */
        public static final int PROC_TYPE_DEVICE_CODE_CHANGE = 102;
        /**
         * < \u7ec8\u7aef\u8bbe\u5907\u66f4\u65b0\u4fe1\u606f\uff0c \u5f53\u5b58\u5728\u8bbe\u5907\u65b0\u589e\u3001\u5220\u9664\u65f6\uff0c \u4e0a\u62a5\u66f4\u65b0\u6d88\u606f\uff0c \u5bf9\u5e94\u7684\u7ed3\u6784 \uff1aDEVICE_CHANGE_INFO_EX_S<br>
         * <i>native declaration : line 873</i>
         */
        public static final int PROC_TYPE_DEVICE_CHANGE = 103;
        /**
         * < \u4fee\u6539\u7ec8\u7aef\u6d88\u606f\uff0c \u5bf9\u5e94\u7684\u7ed3\u6784 \uff1aMODIFY_TERM_REP_EX_S<br>
         * <i>native declaration : line 874</i>
         */
        public static final int PROC_TYPE_MODIFY_TERM = 104;
        /**
         * < \u5f53\u524d\u4e3b\u5e2d\u53d1\u751f\u6539\u53d8\uff0c \u4e3b\u5e2d\u4f1a\u573a\u91ca\u653e\u5219\u4f1a\u573a\u7f16\u7801\u4e3a\u7a7a\u3002\u5bf9\u5e94\u7684\u7ed3\u6784 \uff1aCONF_SITE_INFO_EX_S<br>
         * <i>native declaration : line 875</i>
         */
        public static final int PROC_TYPE_CHAIR_CHANGE = 105;
        /**
         * < \u5f53\u524d\u53d1\u8a00\u4eba\u53d1\u751f\u6539\u53d8\uff0c \u5bf9\u5e94\u7684\u7ed3\u6784 \uff1aCONF_SITE_INFO_EX_S<br>
         * <i>native declaration : line 876</i>
         */
        public static final int PROC_TYPE_SPEAKER_CHANGE = 106;
        /**
         * < \u4f1a\u573a\u7ec8\u7aef\u72b6\u6001\u6539\u53d8\uff0c \u5bf9\u5e94\u7684\u7ed3\u6784 \uff1aTERM_STATUS_CHANGE_EX_S<br>
         * <i>native declaration : line 877</i>
         */
        public static final int PROC_TYPE_TERM_STATUS_CHANGE = 107;
        /**
         * < \u5ef6\u8fdf\u4f1a\u8bae\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aDELAY_CONF_INFO_EX_S<br>
         * <i>native declaration : line 878</i>
         */
        public static final int PROC_TYPE_DELAY_CONF = 108;
        /**
         * < \u4e0a\u62a5\u5e7f\u64ad\u4f1a\u573a\uff0c \u4e3b\u5e2d\u3001\u4e3b\u573a\u89c2\u770b\u4f1a\u573a \u5bf9\u5e94\u7684\u7ed3\u6784 \uff1a MC_SYNCHRONIZE_WITH_WEB_EX_S<br>
         * <i>native declaration : line 879</i>
         */
        public static final int PROC_TYPE_SYNCHRONIZE_WITH_WEB = 109;
        /**
         * < MCU\u5907\u4efd\u901a\u77e5\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aBACKUP_MCU_REPORT_S<br>
         * <i>native declaration : line 880</i>
         */
        public static final int PROC_TYPE_MCU_BACKUP_CHANGE_TO_MASTER = 110;
        /**
         * < \u5f53\u524d\u8f85\u6d41\u53d1\u9001\u8005\u53d8\u5316\u901a\u77e5\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aCONF_SEND_ROLE_SITE_CHANGE_S<br>
         * <i>native declaration : line 881</i>
         */
        public static final int PROC_TYPE_SEND_ROLE_SITE_CHANGE = 111;
        /**
         * < \u591a\u753b\u9762\u81ea\u52a8\u5207\u6362\u503c\u6539\u53d8\u901a\u77e5\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aCONF_AUTOMULTIPIC_CHANGE_S<br>
         * <i>native declaration : line 882</i>
         */
        public static final int PROC_TYPE_AUTOMULTIPIC_CHANGE = 112;
        /**
         * < \u8bbe\u7f6e\u753b\u9762\u8f6e\u8be2\u6a21\u5f0f\u6539\u53d8\u901a\u77e5\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aCONF_SET_TURN_BROADCAST_CHANGE_S<br>
         * <i>native declaration : line 883</i>
         */
        public static final int PROC_TYPE_SET_TURN_BROADCAST_CHANGE = 113;
        /**
         * < \u8bbe\u7f6e\u753b\u9762\u6a21\u5f0f\u6539\u53d8\u901a\u77e5\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aCONF_SET_PIC_MODE_CHANGE_S<br>
         * <i>native declaration : line 884</i>
         */
        public static final int PROC_TYPE_SET_PIC_MODE_CHANGE = 114;
        /**
         * < MCU\u540c\u6b65\u72b6\u6001\u6539\u53d8\u901a\u77e5\uff0c \u5bf9\u5e94\u7ed3\u6784 \uff1aMCU_SYNC_STATUS_CHANGE_S<br>
         * <i>native declaration : line 885</i>
         */
        public static final int PROC_TYPE_MCU_SYNC_STATUS_CHANGE = 115;
        /**
         * < \u5f53\u524d\u5b9e\u9645\u5e7f\u64ad\u4f1a\u573a\u6539\u53d8\u901a\u77e5\uff0c\u5bf9\u5e94\u7ed3\u6784\uff1aCUR_BROADCAST_INFO_EX_S<br>
         * <i>native declaration : line 886</i>
         */
        public static final int PROC_TYPE_CUR_BROADCAST_CHANGE = 116;
        /**
         * < \u5f53\u524d\u4e3b\u5e2d\u6216\u4e3b\u573a\u5b9e\u9645\u89c2\u770b\u7684\u4f1a\u573a\u6539\u53d8\u901a\u77e5\uff0c\u5bf9\u5e94\u7ed3\u6784\uff1aCUR_CHAIR_BROWSE_INFO_EX_S<br>
         * <i>native declaration : line 887</i>
         */
        public static final int PROC_TYPE_CUR_CHAIR_BROWSE_CHANGE = 117;
        /**
         * < \u5f53\u524dFECC\u63a7\u5236\u8005\u6216\u88ab\u63a7\u8005\u53d8\u5316\u901a\u77e5\uff0c\u5bf9\u5e94\u7ed3\u6784\uff1aCONF_FECC_CHANGE_S<br>
         * <i>native declaration : line 888</i>
         */
        public static final int PROC_TYPE_CONF_FECC_CHANGE = 118;
        /**
         * < \u5f53\u524d\u4f1a\u8bae\u4e2dMCU\u5907\u4efd\u53d8\u5316\u901a\u77e5\uff0c\u5bf9\u5e94\u7ed3\u6784\uff1aCONF_MCU_BACKUP_CHANGE_S<br>
         * <i>native declaration : line 889</i>
         */
        public static final int PROC_TYPE_CONF_MCU_BACKUP_CHANGE = 119;
        /**
         * < \u547c\u53eb\u4f1a\u573a\u7ed3\u679c\u901a\u77e5\uff0c\u5bf9\u5e94\u7ed3\u6784\uff1aCALL_SITE_INFO_EX_S<br>
         * <i>native declaration : line 890</i>
         */
        public static final int PROC_TYPE_CALL_SITE_RESULT = 120;
        /**
         * < GK\u6ce8\u518c\u7ed3\u679c\u901a\u77e5\uff0c\u5bf9\u5e94\u7ed3\u6784\uff1aGK_REG_STATE_INFO_EX_S<br>
         * <i>native declaration : line 891</i>
         */
        public static final int PROC_TYPE_GK_REG_STATE = 121;
        /**
         * < \u7ec8\u7aef\u4f1a\u8bdd\u72b6\u6001\uff0c\u5bf9\u5e94\u7ed3\u6784\uff1aMG_SESSION_STATUS_EX_S<br>
         * <i>native declaration : line 892</i>
         */
        public static final int PROC_TYPE_MG_SESSION_STATUS_CHANGE = 122;
        /**
         * < \u5b58\u50a8\u8d44\u6e90\u88ab\u91ca\u653e\uff0c\u5bf9\u5e94\u7ed3\u6784 : FREE_STORE_RES_SUCCEED_S<br>
         * <i>native declaration : line 893</i>
         */
        public static final int PROC_TYPE_FREE_STORE_RES_SUCCEED = 123;
        /**
         * < \u5a92\u4f53\u72b6\u6001\u901a\u77e5\u6d88\u606f\uff0c\u5bf9\u5e94\u7ed3\u6784 : MEDIA_STATUS_NOTIFY_S<br>
         * <i>native declaration : line 894</i>
         */
        public static final int PROC_TYPE_MEDIA_STATUS_NOTIFY = 124;
        /**
         * < \u544a\u8b66\u8054\u52a8\u5230\u8bed\u97f3\u5bf9\u8bb2\u901a\u77e5\uff0c\u5bf9\u5e94\u7ed3\u6784 : ALARM_LINKAGE_VOCTALK_TO_UI_S<br>
         * <i>native declaration : line 896</i>
         */
        public static final int PROC_TYPE_ALARM_LINKAGE_VOCTALK = 125;
        /**
         * <\u4eba\u673a\u7ec4\u5207\u8f93\u51fa\u7aef\u53e3\u57fa\u672c\u4fe1\u606f\u6539\u53d8.\u5bf9\u5e94\u7ed3\u6784\u4f53MMI_VOUT_INFO_FOR_ECR_S<br>
         * <i>native declaration : line 900</i>
         */
        public static final int PROC_TYPE_MMI_VOUT_INFO_CHANGE = 400;
        /**
         * <\u4eba\u673a\u7ec4\u5207\u9884\u89c8\u7a97\u683c\u6444\u50cf\u673a\u5e8f\u5217\u4fe1\u606f\u6539\u53d8, \u5bf9\u5e94\u7ed3\u6784\u4f53: MMI_VOUT_WINLIST_INFO_FOR_ECR_S<br>
         * <i>native declaration : line 901</i>
         */
        public static final int PROC_TYPE_MMI_VOUT_WINLIST_CHANGE = 401;
        /**
         * <\u865a\u62df\u901a\u9053\u57fa\u672c\u4fe1\u606f\u6539\u53d8\uff0c\u5bf9\u5e94\u7ed3\u6784\u4f53VIRTUAL_CHANNEL_BIND_STATUS_S<br>
         * <i>native declaration : line 902</i>
         */
        public static final int PROC_TYPE_VIRTUAL_CHANNEL_STATUS_CHANGE = 402;
        /**
         * <\u865a\u62df\u901a\u9053\u5206\u8fa8\u7387/\u5e27\u7387\u6539\u53d8\uff0c\u5bf9\u5e94\u7ed3\u6784\u4f53VIRTUAL_CHANNEL_BIND_STATUS_S<br>
         * <i>native declaration : line 905</i>
         */
        public static final int PROC_TYPE_VIRTUAL_CHANNEL_INFO_CHANGE = 403;
        /**
         * < \u68c0\u67e5\u9501\u5b9a\u7a7a\u95f4\u901a\u77e5\u6d88\u606f\uff0c\u5bf9\u5e94\u7ed3\u6784 : AS_SM_LOCK_SPACE_NOTIFY_S<br>
         * <i>native declaration : line 908</i>
         */
        public static final int PROC_TYPE_LOCK_SPACE_NOTIFY = 404;
        /**
         * < \u6444\u50cf\u673a\u4e0a\u7ebf\u91cd\u4e0b\u53d1\u901a\u77e5\u6d88\u606f\uff0c\u5bf9\u5e94\u7ed3\u6784 : AS_SM_LOCK_FAILURE_NOTIFY_S<br>
         * <i>native declaration : line 909</i>
         */
        public static final int PROC_TYPE_LOCK_FAILURE_NOTIFY = 405;
        /**
         * <\u7535\u89c6\u5899\u573a\u666f\u8f6e\u8be2\u4fe1\u606f\uff0c\u5bf9\u5e94\u7ed3\u6784\u4f53CS_TVWALL_POLL_INFO_NOTIFY_S<br>
         * <i>native declaration : line 912</i>
         */
        public static final int PROC_TYPE_TV_WALL_POLL_INFO_NOTIFY = 406;
        /**
         * < \u7528\u6237\u767b\u9646\u62a2\u5360\u901a\u77e5\u6d88\u606f\uff0c\u5bf9\u5e94\u7ed3\u6784\u4f53: LOGIN_REAVE_NOTIFY_S<br>
         * <i>native declaration : line 915</i>
         */
        public static final int PROC_TYPE_USER_LOGIN_REAVE_NOTIFY = 407;
        /**
         * < \u4ea4\u901a\u4e8b\u4ef6\uff0c\u5bf9\u5e94\u7ed3\u6784 : TMS_TRAFFIC_EVENT_S<br>
         * <i>native declaration : line 917</i>
         */
        public static final int PROC_TYPE_TRAFFIC_EVENT = 408;
        /**
         * < \u56de\u8c03\u51fd\u6570\u5904\u7406\u4fe1\u606f\u7c7b\u578b\u6700\u5927\u503c<br>
         * <i>native declaration : line 919</i>
         */
        public static final int PROC_TYPE_MAX = 409;
        /**
         * < \u65e0\u6548\u503c<br>
         * <i>native declaration : line 920</i>
         */
        public static final long PROC_TYPE_INVALID = 0xFFFFFFFFL;
    };
    /** enum values */
    public static interface tagPtzNotifyUIEventType {
        /**
         * \u4e91\u53f0\u8fde\u63a5\u7a7a\u95f2\u8d85\u65f6 \u8fde\u63a5\u88ab\u91ca\u653e<br>
         * <i>native declaration : line 926</i>
         */
        public static final int PTZ_NOTIFY_TYPE_RELEASE_TIME_OUT = 0;
        /**
         * \u4e91\u53f0\u88ab\u5f3a\u5360\uff0c\u8fde\u63a5\u91ca\u653e<br>
         * <i>native declaration : line 927</i>
         */
        public static final int PTZ_NOTIFY_TYPE_REAVED = 1;
        /**
         * \u4e91\u53f0\u6545\u969c\uff0c\u8fde\u63a5\u91ca\u653e<br>
         * <i>native declaration : line 928</i>
         */
        public static final int PTZ_NOTIFY_TYPE_TROUBLE = 2;
        /**
         * \u7528\u6237\u65e0\u4e91\u53f0\u63a7\u5236\u6743\u9650<br>
         * <i>native declaration : line 929</i>
         */
        public static final int PTZ_NOTIFY_TYPE_USER_HAS_NO_AUTHORITY = 3;
        /**
         * \u7528\u6237\u6743\u9650\u4f4e<br>
         * <i>native declaration : line 930</i>
         */
        public static final int PTZ_NOTIFY_TYPE_PTZ_USER_HAS_LOWER_AUTHORITY = 4;
        /**
         * \u4e91\u53f0\u88ab\u5176\u4ed6\u7528\u6237\u9501\u5b9a<br>
         * <i>native declaration : line 931</i>
         */
        public static final int PTZ_NOTIFY_TYPE_PTZ_HAS_LOCKED_BY_OTHER = 5;
        /**
         * \u63a7\u5236\u5757\u5df2\u6ee1<br>
         * <i>native declaration : line 933</i>
         */
        public static final int PTZ_NOTIFY_TYPE_PTZ_CCB_FULL = 6;
        /** <i>native declaration : line 934</i> */
        public static final int PTZ_NOTIFY_TYPE_MAX = 7;
        /** <i>native declaration : line 935</i> */
        public static final long PTZ_NOTIFY_TYPE_INVALID = 0xFFFFFFFFL;
    };
    /** enum values */
    public static interface tagSalvoUnitNotifyUIEventType {
        /**
         * \u7ec4\u663e\u793a\u5355\u5143\u5efa\u7acb\u5b9e\u51b5\u5931\u8d25<br>
         * <i>native declaration : line 942</i>
         */
        public static final int SALVO_UNIT_NOTIFY_TYPE_START_FAIL = 0;
        /**
         * \u7ec4\u663e\u793a\u5355\u5143\u7684\u5b9e\u51b5\u88ab\u62a2\u5360<br>
         * <i>native declaration : line 943</i>
         */
        public static final int SALVO_UNIT_NOTIFY_TYPE_BE_REAVED = 1;
        /**
         * \u76f8\u540c\u7684\u7ec4\u663e\u793a\u5355\u5143\u7684\u5b9e\u51b5\u5df2\u5b58\u5728<br>
         * <i>native declaration : line 944</i>
         */
        public static final int SALVO_UNIT_NOTIFY_TYPE_SAME_EXIST = 2;
        /**
         * \u76f8\u540c\u7684\u7ec4\u663e\u793a\u5355\u5143\u7684\u5b9e\u51b5\u6b63\u5728\u5efa\u7acb<br>
         * <i>native declaration : line 945</i>
         */
        public static final int SALVO_UNIT_NOTIFY_TYPE_SAME_CREATING = 3;
        /**
         * \u6545\u969c\u5f15\u8d77\u7ec4\u663e\u793a\u5355\u5143\u5b9e\u51b5\u91ca\u653e<br>
         * <i>native declaration : line 946</i>
         */
        public static final int SALVO_UNIT_NOTIFY_TYPE_TROUBLE = 4;
        /**
         * \u7ec4\u663e\u793a\u5355\u5143\u6062\u590d\u5b9e\u51b5<br>
         * <i>native declaration : line 947</i>
         */
        public static final int SALVO_UNIT_NOTIFY_TYPE_RESUME_SUCC = 5;
        /**
         * \u7ec4\u663e\u793a\u4fee\u6539\u5f15\u8d77\u5355\u5143\u5b9e\u51b5\u91ca\u653e<br>
         * <i>native declaration : line 948</i>
         */
        public static final int SALVO_UNIT_NOTIFY_TYPE_RES_MODIFY = 6;
        /**
         * \u7528\u6237\u505c\u6b62\u7ec4\u663e\u793a\u5355\u5143<br>
         * <i>native declaration : line 949</i>
         */
        public static final int SALVO_UNIT_NOTIFY_TYPE_USER_STOP = 7;
        /** <i>native declaration : line 951</i> */
        public static final int SALVO_UNIT_NOTIFY_TYPE_MAX = 8;
        /** <i>native declaration : line 952</i> */
        public static final long SALVO_UNIT_NOTIFY_TYPE_INVALID = 0xFFFFFFFFL;
    };
    /** enum values */
    public static interface tagSalvoNotifyEventType {
        /**
         * \u7ec4\u663e\u793a\u4e1a\u52a1\u88ab\u505c\u6b62<br>
         * <i>native declaration : line 959</i>
         */
        public static final int NOTIFY_TYPE_SALVO_BE_STOPPED = 0;
        /**
         * \u7ec4\u663e\u793a\u4e1a\u52a1\u88ab\u62a2\u5360<br>
         * <i>native declaration : line 960</i>
         */
        public static final int NOTIFY_TYPE_SALVO_BE_REAVED = 1;
        /**
         * \u7ec4\u8f6e\u5de1\u4e1a\u52a1\u88ab\u505c\u6b62<br>
         * <i>native declaration : line 961</i>
         */
        public static final int NOTIFY_TYPE_GROUPSALVO_BE_STOPPED = 2;
        /**
         * \u7ec4\u8f6e\u5de1\u4e1a\u52a1\u88ab\u62a2\u5360<br>
         * <i>native declaration : line 962</i>
         */
        public static final int NOTIFY_TYPE_GROUPSALVO_BE_REAVED = 3;
        /**
         * \u7ec4\u8f6e\u5de1\u5207\u6362\u505c\u6b62\u7ec4\u663e\u793a<br>
         * <i>native declaration : line 963</i>
         */
        public static final int NOTIFY_TYPE_GROUPSALVO_STOP_SALVO_PER_TIME = 4;
        /**
         * \u7ec4\u663e\u793a\u4e1a\u52a1\u4e2d\u6240\u6709\u5b9e\u51b5\u5f85\u6062\u590d<br>
         * <i>native declaration : line 964</i>
         */
        public static final int NOTIFY_TYPE_SALVO_ALL_MON_UNACTIVE = 5;
        /** <i>native declaration : line 966</i> */
        public static final int NOTIFY_TYPE_MAX = 6;
        /** <i>native declaration : line 967</i> */
        public static final long NOTIFY_TYPE_INVALID = 0xFFFFFFFFL;
    };
    public static final String A8_BASE_PICTURE_PATH = (String)"/mnt/syncdata/resftp/A8/BASEPIC/";
    public static final String A8_EDID_PATH = (String)"/mnt/syncdata/resftp/A8/EDID/";
    public static final int A8_EDID_SIZE = (int)128;
    public static final int A8_EDID_MAX_SIZE = (int)256;
    public static final int CS_TVWALL_SCENE_ID = (int)99;
    public static final int TVWALL_SCENE_MAX_NUM = (int)64;
    public static final String TVWALL_DEFAULT_CODE = (String)"tvwall";
    public static final String WINDOW_DEFAULT_CODE = (String)"window";
    public static final String CAMERA_DEFAULT_CODE = (String)"cam";
    public static final String SCREEN_DEFAULT_CODE = (String)"screen";
    public static final String TVWALL_SCENE_GROUP_DEFAULT_CODE = (String)"scenegroup";
    public static final String A8_TVWALL_DISABLE_CODE = (String)"DISABLE_TVWALL_CODE";
    public static final String A8_INVILD_SCREEN_CODE = (String)"INVALID_SCREEN_CODE";
    public static final String A8_INVILD_CAMERA_CODE = (String)"INVALID_CAMERA_CODE";
    public static final String A8_INVILD_SWITCH_RES_CODE = (String)"INVALID_SWITCH_RES_CODE";
    public static final String A8_INVILD_POLL_RES_CODE = (String)"INVALID_POLL_RES_CODE";
    public static final String MM_SIP_KEY_MESSAGE = (String)"Message";
    public static final String MM_SIP_KEY_COMMAND = (String)"Command";
    public static final String MM_SIP_KEY_COMMAND_VALUE = (String)"CMD_ALARM_DATA";
    public static final String MM_SIP_KEY_TYPE = (String)"Type";
    public static final String MM_SIP_KEY_TYPE_VALUE = (String)"Req";
    public static final String MM_SIP_KEY_VARIABLE = (String)"Variable";
    public static final String MM_SIP_KEY_WINDOW = (String)"Window";
    public static final String MM_SIP_KEY_SPLIT = (String)"Split";
    public static final String MM_SIP_KEY_ROAM = (String)"Roam";
    public static final String MM_SIP_KEY_STACK = (String)"Stack";
    public static final String MM_SIP_KEY_MOSAIC = (String)"Mosaic";
    public static final String MM_SIP_KEY_BASEMAP = (String)"Basemap";
    public static final String MM_SIP_KEY_VLED = (String)"VLed";
    public static final String MM_SIP_KEY_TRANSPARENCY = (String)"Transparency";
    public static final String MM_SIP_KEY_ARBITRARILY = (String)"Arbitrarily";
    public static final String MM_SIP_KEY_BASEMAPSIZE = (String)"BasemapSize";
    public static final String MM_SIP_KEY_RESOLUTION = (String)"Resolution";
    public static final String XWARE_REG_XML_NODE_MAX_TVWALL_NUM = (String)"MaxTVWallsNums";
    public static final String XWARE_REG_XML_NODE_MAX_SCENES_NUM = (String)"MaxScenesNums";
    public static final String XWARE_REG_XML_NODE_MAX_ROW_NUM = (String)"MaxRowNums";
    public static final String XWARE_REG_XML_NODE_MAX_COL_NUM = (String)"MaxColNums";
    public static final String XWARE_REG_XML_NODE_SUP_VIDEO_FOR = (String)"VideoFormats";
    public static final String XWARE_REG_XML_NODE_MAX_WIN_NUM = (String)"MaxWinNums";
    public static final String XWARE_REG_XML_NODE_MAX_SCREEN_WIN = (String)"MaxPerScreenWinAreas";
    public static final String XWARE_REG_XML_NODE_MAX_PER_WIN_PANE_NUM = (String)"MaxPerWinPaneNums";
    public static final String XWARE_REG_XML_NODE_MIN_WIN_WIDTH = (String)"MinWinWidth";
    public static final String XWARE_REG_XML_NODE_MIN_WIN_HEIGHT = (String)"MinWinHeight";
    public static final String XWARE_REG_XML_NODE_MAX_BASEMAP_NUM = (String)"MaxBaseMapNums";
    public static final String XWARE_REG_XML_NODE_MAX_PERSCENE_BASEMAP_NUM = (String)"MaxPerSceneBaseMapNums";
    public static final String XWARE_REG_XML_NODE_MAX_BASEMAP_WIDTH = (String)"MaxBaseMapWidth";
    public static final String XWARE_REG_XML_NODE_MAX_BASEMAP_HEIGHT = (String)"MaxBaseMapHeight";
    public static final String XWARE_REG_XML_NODE_MAX_BASEMAP_SIZE = (String)"MaxBaseMapSize";
    public static final String XWARE_REG_XML_NODE_MAX_PERSCENE_VIR_LED_NUM = (String)"MaxPerSceneVLEDNums";
    public static final String XWARE_REG_XML_NODE_MAX_VIR_LED_ROW = (String)"MaxVLEDRows";
    public static final String XWARE_REG_XML_NODE_MAX_VIR_LED_CHAR = (String)"MaxVLEDChars";
    public static final String XWARE_REG_XML_NODE_MAX_SEQ_RES_NUM = (String)"MaxSeqRSrcNums";
    public static final String XWARE_REG_XML_NODE_MAX_PANE_SEQ_NUM = (String)"MaxPaneSeqNums";
    public static final String XWARE_REG_XML_NODE_MAX_WIN_SEQ_NUM = (String)"MaxWinSeqNums";
    public static final String XWARE_REG_XML_NODE_MAX_SCENE_SEQ_NUM = (String)"MaxSceneSeqNums";
    public static final String XWARE_REG_XML_NODE_IS_SUP_BACK_TO_SHOW = (String)"CanBacktoShow";
    public static final String XWARE_REG_XML_NODE_WIN_CAP = (String)"WinCaps";
    public static final String XWARE_REG_XML_NODE_PANE_CAP = (String)"PaneCaps";
    public static final String XWARE_REG_XML_NODE_WIN_ROAM_CAP = (String)"WinRoamingCaps";
    public static final String XWARE_REG_XML_NODE_IS_SUP_OVERLAY = (String)"CanOverlay";
    public static final String XWARE_REG_XML_NODE_IS_SUP_SET_TRAN = (String)"CanSetTrans";
    public static final String XWARE_REG_XML_NODE_ABSRACT = (String)"Abstract";
    public static final String XWARE_REG_XML_NODE_SUP_PANE_TYPE = (String)"SupportPaneTypes";
    public static final int IMOS_OPTION_BUFFER_LEN_MIN = (int)1;
    public static final int IMOS_OPTION_BUFFER_LEN_MAX = (int)64;
    public static final int IMOS_MONITOR_MAXNUM_PER_WALL = (int)256;
    public static final int IMOS_ALARM_STORE_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_VOCTALK_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_TVWALL_MONITOR_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_CENTER_STORE_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_PRESET_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_SCREENLIVE_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_MONITORLIVE_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_GIS_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_SWITCHOUT_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_BACKUP_ACTION_MAXNUM = (int)16;
    public static final int IMOS_ALARM_ACTION_RECEIVER_MAXNUM = (int)300;
    public static final int IMOS_ALARM_BUZZER_ACTION_MAXNUM = (int)1;
    public static final int IMOS_TRANSPARENT_SERIAL_NUM = (int)2;
    public static final int IMOS_SWITCH_CAM_MAXNUM = (int)32;
    public static final int IMOS_SWITCH_CAM_MAXNUM_V2 = (int)512;
    public static final int IMOS_CRUISE_PATH_PRESET_MAX_COUNT = (int)32;
    public static final int IMOS_ARRAY_SLOT_MAXNUM = (int)10;
    public static final int IMOS_MASK_AREA_MAXNUM_III = (int)3;
    public static final int IMOS_MASK_AREA_MAXNUM_I = (int)1;
    public static final int IMOS_COVER_AREA_MAXNUM = (int)4;
    public static final int IMOS_NTP_SERVER_MAXNUM = (int)3;
    public static final int IMOS_GIS_FOR_ALARM_SRC_MAX_NUM = (int)5;
    public static final int IMOS_CONTRACT_ID = (int)32;
    public static final int IMOS_LICENSE_SERIALS_NUM = (int)256;
    public static final int IMOS_LICENSE_SERVICE_TYPE_NUM = (int)20;
    public static final int IMOS_PAGE_QUERY_ROW_MAX_NUM = (int)200;
    public static final int IMOS_ONCE_SHARE_RES_MAXNUM = (int)1;
    public static final int IMOS_MAX_CAMERA_NUM_PER_EC = (int)64;
    public static final int IMOS_MAX_SCREEN_NUM_PER_DC = (int)16;
    public static final int IMOS_INVALID_CHANNEL_NO = (int)0xFF;
    public static final int IMOS_XP_WIN_MAX_NUM = (int)128;
    public static final int IMOS_QUERY_DATA_MAX_LEN = (int)64;
    public static final int IMOS_QUERY_ITEM_MAX_NUM = (int)16;
    public static final int IMOS_MAX_EXTERNAL_DOMAIN_NUM = (int)2048;
    public static final int IMOS_MAX_USER_ROLES_NUM = (int)16;
    public static final int IMOS_MAX_NOTIFY_LEN = (int)4096;
    public static final int IMOS_DEV_STATUS_MAX_NUM = (int)4;
    public static final int IMOS_DISPLAY_MAXNUM_PER_LAYOUT = (int)256;
    public static final int IMOS_DISPLAY_MAXNUM_PER_SALVO = (int)256;
    public static final int IMOS_SCENE_MAXNUM_RES = (int)1;
    public static final int IMOS_RES_NUM_MAX_PER_GROUP = (int)256;
    public static final int IMOS_COMMON_SWITCH_RES_MAXNUM = (int)256;
    public static final int IMOS_AUTOPOLL_CAMERA_RES_MAXNUM = (int)5000;
    public static final int IMOS_AUTOPOLL_WINDOW_RES_MAXNUM = (int)480;
    public static final int IMOS_AUTOPOLL_WINDOWSPLIT_MAXNUM = (int)(480 * 16);
    public static final int IMOS_GIS_MAX_HOTZONE_NUM_PER_MAP = (int)32;
    public static final int IMOS_GIS_MAX_ICON_NUM_PER_MAP = (int)2048;
    public static final int IMOS_MAX_GIS_MAP_PARAM_NUM = (int)1;
    public static final int IMOS_SYS_PARAM_MAX_NUM = (int)128;
    public static final int IMOS_EVENT_ENABLE_ADD_MAX_NUM = (int)1024;
    public static final int IMOS_EVENT_TYPE_REL_MAX_NUM = (int)128;
    public static final int NIC_COUNT_MAX = (int)4;
    public static final int ONVIF_FLOAT_LEN = (int)48;
    public static final int ONVIF_URL_LEN = (int)256;
    public static final int ONVIF_OSD_TEXT_MAX_LEN = (int)256;
    public static final int ONVIF_OSD_MAX_NUM = (int)8;
    public static final int ONVIF_OSD_DATE_FORMAT_LEN = (int)32;
    public static final int ONVIF_OSD_DATE_FORMAT_MAX_NUM = (int)8;
    public static final int ONVIF_OSD_TEXT_STRING_TYPE_MAX_LEN = (int)32;
    public static final int ONVIF_OSD_TEXT_STRING_TYPE_MAX_NUM = (int)8;
    public static final int ONVIF_OSD_TIME_FORMAT_LEN = (int)32;
    public static final int ONVIF_OSD_TIME_FORMAT_MAX = (int)4;
    public static final int ONVIF_OSD_COLOR_MAX_NUM = (int)16;
    public static final int ONVIF_OSD_COLOR_RANGE_MAX_NUM = (int)16;
    public static final int ONVIF_OSD_IMAGE_PATH_MAX_NUM = (int)16;
    public static final int ONVIF_OSD_POS_TYPE_MAX_LEN = (int)32;
    public static final int ONVIF_OSD_POS_TYPE_MAX_NUM = (int)8;
    public static final int ONVIF_ACTIVE_CELLS_MAX_LEN = (int)512;
    public static final int ONVIF_ITEM_LEN = (int)64;
    public static final int ONVIF_ATTRIBUTE_LEN = (int)64;
    public static final int ONVIF_NAME_LEN = (int)64;
    public static final int ONVIF_TYPE_LEN = (int)64;
    public static final int ONVIF_VIDEO_ENCODER_MAX_NUM = (int)16;
    public static final int ONVIF_VIDEO_ENCODER_NAME_LEN = (int)64;
    public static final int ONVIF_VIDEO_ENCODER_TOKEN_LEN = (int)64;
    public static final int ONVIF_VIDEO_RESOLUTION_MAX_NUM = (int)16;
    public static final int ONVIF_TIME_LEN = (int)32;
    public static final int ONVIF_IPADDR_LEN = (int)64;
    public static final int ONVIF_AUDIO_ENCODER_MAX_NUM = (int)4;
    public static final int ONVIF_AUDIO_OPTIONS_MAX_NUM = (int)8;
    public static final int ONVIF_AUDIO_OPTIONS_BIT_RATE_MAX_NUM = (int)8;
    public static final int ONVIF_AUDIO_OPTIONS_SAMPLE_RATE_MAX_NUM = (int)8;
    public static final String IMOS_MANUFACTURER_TYPE_VMISC = (String)"H3C VM/ISC";
    public static final String IMOS_MANUFACTURER_TYPE_VMISC_V2 = (String)"VM/ISC";
    public static final String IMOS_MANUFACTURER_TYPE_DA = (String)"H3C DA";
    public static final String IMOS_MANUFACTURER_TYPE_CURRENCY_DA = (String)"DA";
    public static final String IMOS_MANUFACTURER_TYPE_OTHER = (String)"Other";
    public static final String IMOS_MANUFACTURER_TYPE_PL = (String)"Aproud PL";
    public static final String IMOS_MANUFACTURER_TYPE_PLS = (String)"Aproud PL-S";
    public static final String IMOS_MANUFACTURER_TYPE_ECRHF = (String)"H3C ECR-HF";
    public static final String IMOS_MANUFACTURER_TYPE_BOCOM = (String)"BOCOM";
    public static final String IMOS_MANUFACTURER_TYPE_DABK = (String)"DABackup";
    public static final String IMOS_PTZ_PROTOCOL_TYPE_INTERNAL = (String)"INTERNAL-PTZ";
    public static final String IMOS_SDK_CLIB_INVALID_IP_ADDRESS = (String)"N/A";
    public static final String IMOS_SDK_INITIATE_INVALID_IP_ADDRESS = (String)"0.0.0.0";
    public static final String IMOS_SDK_MU_CLIB_MODULE_NAME = (String)"VM";
    public static final int IMOS_EMAIL_NOTIFICATION_NUMBER = (int)3;
    public static final int IMOS_HD_MAX_SITE_NAME_LEN = (int)31;
    public static final int IMOS_SITE_NAME_LEN = (int)48;
    public static final int IMOS_HD_MAX_CONF_NAME_LEN = (int)31;
    public static final int IMOS_CONF_NAME_LEN = (int)48;
    public static final int IMOS_HD_MAX_AUDIO_PROTOCOL_NUM = (int)20;
    public static final int IMOS_HD_MAX_BANNER_LEN = (int)43;
    public static final int IMOS_BANNER_LEN = (int)66;
    public static final int IMOS_HD_MAX_CONF_ALIAS_LEN = (int)31;
    public static final int IMOS_CONF_ALIAS_LEN = (int)(31 + 1);
    public static final int IMOS_HD_MAX_SITE_PER_CONF_NUM = (int)256;
    public static final int IMOS_HD_MAX_SUBPIC_NUM = (int)64;
    public static final int IMOS_HD_MAX_VIDEO_FORMAT_NUM = (int)32;
    public static final int IMOS_HD_MAX_VIDEO_FRAMERATE_NUM = (int)7;
    public static final int IMOS_HD_MAX_VIDEO_PROTOCOL_NUM = (int)4;
    public static final int IMOS_HD_MAX_VIDEO_RATE_NUM = (int)8;
    public static final int IMOS_HD_MAX_SIM_CAP_NUM = (int)8;
    public static final int IMOS_MC_MAX_CONF_CYCLE_TABLE_COUNT = (int)10;
    public static final int IMOS_MC_MAX_CONF_PWD_LEN = (int)11;
    public static final int IMOS_CONF_PWD_LEN = (int)(11 + 1);
    public static final int IMOS_MC_MAX_LAN_NET_NUM = (int)4;
    public static final int IMOS_HD_MAX_NETCARD_NAME_LEN = (int)31;
    public static final int IMOS_NETCARD_NAME_LEN = (int)48;
    public static final int IMOS_MC_MAX_MCU_NAME_LEN = (int)31;
    public static final int IMOS_MCU_NAME_LEN = (int)(31 + 1);
    public static final int IMOS_MC_MAX_MCU_IP_NUM = (int)4;
    public static final int IMOS_MC_MAX_LAN_ROUTE_NUM = (int)20;
    public static final int IMOS_MC_MAX_LAN_ARP_NUM = (int)20;
    public static final int IMOS_MC_MAX_MAC_ADDR_LEN = (int)20;
    public static final int IMOS_HD_MAX_SOFT_VERSION_LEN = (int)255;
    public static final int IMOS_SOFT_VERSION_LEN = (int)(255 + 1);
    public static final int IMOS_HD_MAX_DSP_PER_PLANK = (int)15;
    public static final int IMOS_HD_MAX_DSP_NUM_PER_CONF = (int)4;
    public static final int IMOS_HD_MAX_EMAIL_NAME_LEN = (int)63;
    public static final int IMOS_MC_MAX_WATCH_SITE_NUM = (int)9;
    public static final int IMOS_HD_VIDEO_OUT_NUM = (int)(4);
    public static final int IMOS_HD_VERSION_LEN = (int)(32);
    public static final int IMOS_HD_MAX_USER_NUM = (int)(32);
    public static final int IMOS_HD_MAX_CAM_PRE_NUM = (int)(20);
    public static final int IMOS_HD_MAX_NAME_LENGTH = (int)(32);
    public static final int IMOS_HD_MAX_IP_LENGTH = (int)(32);
    public static final int IMOS_HD_MAX_PATH_LENGTH = (int)(100);
    public static final int IMOS_HD_MAX_PASSWORD_LENGTH = (int)(32);
    public static final int IMOS_HD_MAX_PRIVATE_NET_COUNT = (int)(4);
    public static final int IMOS_HD_MAX_MAC_DISPLAYLENGTH = (int)(17);
    public static final int IMOS_TITLE_MAXNUM = (int)(2);
    public static final int IMOS_TITLE_LEN = (int)(2404);
    public static final int IMOS_MAX_CONTACTS_IN_CONF = (int)(512);
    public static final int IMOS_COMPONENT_MAX_NUM = (int)(50);
    public static final int IMOS_MAX_SITE_LIVE_NUM = (int)(240);
    public static final int IMOS_MAX_MULTI_ADDR_NUM = (int)(8);
    public static final int IMOS_MC_MAX_BITRATE_ADAPT_COUNT = (int)(3);
    public static final int IMOS_MAX_MCU_IN_CONF = (int)(16);
    public static final int IMOS_MAX_TERM_IN_CONF = (int)(1024);
    public static final int IMOS_TRANSPARENT_IP_NUM = (int)1;
    public static final int MAX_VOCBRD_CAM_NUM = (int)128;
    public static final int MAX_PTZ_SPEED = (int)9;
    public static final int IMOS_PROC_NAME_MAX_LEN = (int)32;
    public static final int IMOS_DEFAULT_NUM_OF_STREAM_BYPASS = (int)1024;
    public static final int IMOS_MAX_TASK_NUM = (int)(16);
    public static final int IMOS_ALARM_ACTION_TRAN_MAXNUM = (int)(300);
    public static final int IMOS_MAX_TRIGGER_NUM = (int)(10);
    public static final int IMOS_MAX_NEW_ALARM_NUM = (int)(1);
    public static final int IMOS_ALARM_ACTION_PLAN_MAXNUM = (int)(1);
    public static final int IMOS_TYPE_NEW_ALARM = (int)(65534);
    public static final int IMOS_MASK_AREA_MAXNUM_VIII = (int)8;
    public static final int IMOS_VEHICLE_TYPE_MAX_NUM = (int)32;
    public static final int IMOS_PICTURE_SIZE_MAX_LEN = (int)(512 * 1024);
    public static final int IMOS_VIDEO_AREA_TYPE_ROI = (int)3;
    public static final int IMOS_CASE_MAXNUM_PER_SERIESCASE = (int)64;
    public static final int IMOS_FILE_MAXNUM_PER_CASERECORD = (int)8;
    public static final int IMOS_VEHICLE_VIOLATION_MAX_NUM = (int)200;
    public static final int IMOS_DIC_CODE_MAX_NUM = (int)200;
    public static final int IMOS_VEHICLE_DISPOSITION_DOMAIN_MAX_NUM = (int)200;
    public static final int IMOS_VEHICLE_ABNORMAL_ANALYSE_TG_MAX_NUM = (int)200;
    public static final int IMOS_MAP_LINT_POINT_NUM = (int)2;
    public static final int IMOS_MAP_ROAD_POINT_MAX_NUM = (int)64;
    public static final int IMOS_DETECTION_ROAD_SECTION_VIO_CONF_MAX_NUM = (int)32;
    public static final int TMS_MULTI_ADDR_FORWARD_RULE_MAX_NUM = (int)64;
    public static final int IMOS_TOLLGATE_LANE_MAX_NUM = (int)32;
    public static final int IMOS_RES_LIST_MAX_NUM = (int)200;
    public static final String IMOS_SYSTEM_PARAM_BKP_LINK_ENABLE_NAME = (String)"bkp_link_enable_flag";
    public static final String IMOS_SYSTEM_PARAM_BKP_LINK_ENABLE_LOC_RES_NAME = (String)"bkp_link_enable_loc_res_flag";
    public static final int IMOS_IOT_RES_TYPE_MAX_NUM = (int)50;
    public static final int IMOS_TVWALL_SCREN_RES_MAXNUM = (int)48;
    public static final int IMOS_TRUNK_MAXNUM = (int)32;
    public static final int IMOS_TRUNK_CONTENT_MAXNUM = (int)256;
    public static final int IMOS_MAX_3D_COVER_AREA_NUM = (int)8;
}
