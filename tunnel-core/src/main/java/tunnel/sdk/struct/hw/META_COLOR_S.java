package tunnel.sdk.struct.hw;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import tunnel.sdk.library.HWPuSDKLibrary.UCHAR;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class META_COLOR_S extends Structure {
	/** C type : UCHAR[3] */
	public UCHAR[] auc_r = new UCHAR[3];
	/** C type : UCHAR[3] */
	public UCHAR[] auc_g = new UCHAR[3];
	/** C type : UCHAR[3] */
	public UCHAR[] auc_b = new UCHAR[3];
	/**
	 * \u7f6e\u4fe1\u5ea6<br>
	 * C type : UCHAR[3]
	 */
	public UCHAR[] auc_ConfLev = new UCHAR[3];
	/**
	 * ID<br>
	 * C type : UCHAR[3]
	 */
	public UCHAR[] auc_ColorID = new UCHAR[3];
	public META_COLOR_S() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("auc_r", "auc_g", "auc_b", "auc_ConfLev", "auc_ColorID");
	}
	/**
	 * @param auc_r C type : UCHAR[3]<br>
	 * @param auc_g C type : UCHAR[3]<br>
	 * @param auc_b C type : UCHAR[3]<br>
	 * @param auc_ConfLev \u7f6e\u4fe1\u5ea6<br>
	 * C type : UCHAR[3]<br>
	 * @param auc_ColorID ID<br>
	 * C type : UCHAR[3]
	 */
	public META_COLOR_S(UCHAR auc_r[], UCHAR auc_g[], UCHAR auc_b[], UCHAR auc_ConfLev[], UCHAR auc_ColorID[]) {
		super();
		if ((auc_r.length != this.auc_r.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.auc_r = auc_r;
		if ((auc_g.length != this.auc_g.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.auc_g = auc_g;
		if ((auc_b.length != this.auc_b.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.auc_b = auc_b;
		if ((auc_ConfLev.length != this.auc_ConfLev.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.auc_ConfLev = auc_ConfLev;
		if ((auc_ColorID.length != this.auc_ColorID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.auc_ColorID = auc_ColorID;
	}
	public META_COLOR_S(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends META_COLOR_S implements Structure.ByReference {
		
	};
	public static class ByValue extends META_COLOR_S implements Structure.ByValue {
		
	};
}
