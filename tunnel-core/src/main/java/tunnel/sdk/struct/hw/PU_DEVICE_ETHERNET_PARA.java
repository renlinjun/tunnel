package tunnel.sdk.struct.hw;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_DEVICE_ETHERNET_PARA extends Structure {
	/** \u662f\u5426\u542f\u7528DHCP */
	public boolean bDhcpEnable;
	/**
	 * IP\u5730\u5740<br>
	 * C type : CHAR[16]
	 */
	public byte[] szIPAddress = new byte[16];
	/**
	 * \u5b50\u7f51\u63a9\u7801<br>
	 * C type : CHAR[16]
	 */
	public byte[] szSubNetMask = new byte[16];
	/**
	 * \u7f51\u5173\u5730\u5740<br>
	 * C type : CHAR[16]
	 */
	public byte[] szGateWayAddress = new byte[16];
	/**
	 * \u7b2c\u4e00\u7ec4DNS\u5730\u5740<br>
	 * C type : CHAR[16]
	 */
	public byte[] szFirstDNSAddress = new byte[16];
	/**
	 * \u7b2c\u4e8c\u7ec4DNS\u5730\u5740<br>
	 * C type : CHAR[16]
	 */
	public byte[] szSecondDNSAddress = new byte[16];
	/** C type : CHAR[32] */
	public byte[] szReserved = new byte[32];
	public PU_DEVICE_ETHERNET_PARA() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("bDhcpEnable", "szIPAddress", "szSubNetMask", "szGateWayAddress", "szFirstDNSAddress", "szSecondDNSAddress", "szReserved");
	}
	/**
	 * @param bDhcpEnable \u662f\u5426\u542f\u7528DHCP<br>
	 * @param szIPAddress IP\u5730\u5740<br>
	 * C type : CHAR[16]<br>
	 * @param szSubNetMask \u5b50\u7f51\u63a9\u7801<br>
	 * C type : CHAR[16]<br>
	 * @param szGateWayAddress \u7f51\u5173\u5730\u5740<br>
	 * C type : CHAR[16]<br>
	 * @param szFirstDNSAddress \u7b2c\u4e00\u7ec4DNS\u5730\u5740<br>
	 * C type : CHAR[16]<br>
	 * @param szSecondDNSAddress \u7b2c\u4e8c\u7ec4DNS\u5730\u5740<br>
	 * C type : CHAR[16]<br>
	 * @param szReserved C type : CHAR[32]
	 */
	public PU_DEVICE_ETHERNET_PARA(boolean bDhcpEnable, byte szIPAddress[], byte szSubNetMask[], byte szGateWayAddress[], byte szFirstDNSAddress[], byte szSecondDNSAddress[], byte szReserved[]) {
		super();
		this.bDhcpEnable = bDhcpEnable;
		if ((szIPAddress.length != this.szIPAddress.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szIPAddress = szIPAddress;
		if ((szSubNetMask.length != this.szSubNetMask.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSubNetMask = szSubNetMask;
		if ((szGateWayAddress.length != this.szGateWayAddress.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szGateWayAddress = szGateWayAddress;
		if ((szFirstDNSAddress.length != this.szFirstDNSAddress.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szFirstDNSAddress = szFirstDNSAddress;
		if ((szSecondDNSAddress.length != this.szSecondDNSAddress.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSecondDNSAddress = szSecondDNSAddress;
		if ((szReserved.length != this.szReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserved = szReserved;
	}
	public PU_DEVICE_ETHERNET_PARA(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_DEVICE_ETHERNET_PARA implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_DEVICE_ETHERNET_PARA implements Structure.ByValue {
		
	};
}
