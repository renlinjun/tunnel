package tunnel.sdk.struct.hw;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_LICENCE_FILE_UPLOAD extends Structure {
	/**
	 * \u4e0a\u4f20\u7c7b\u578b<br>
	 * C type : PU_LICENCE_UPLOAD_TYPE_E
	 */
	public int enLicenceType;
	/**
	 * \u6587\u4ef6\u8def\u5f84<br>
	 * C type : CHAR[512]
	 */
	public byte[] szLicenceFile = new byte[512];
	public PU_LICENCE_FILE_UPLOAD() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("enLicenceType", "szLicenceFile");
	}
	/**
	 * @param enLicenceType \u4e0a\u4f20\u7c7b\u578b<br>
	 * C type : PU_LICENCE_UPLOAD_TYPE_E<br>
	 * @param szLicenceFile \u6587\u4ef6\u8def\u5f84<br>
	 * C type : CHAR[512]
	 */
	public PU_LICENCE_FILE_UPLOAD(int enLicenceType, byte szLicenceFile[]) {
		super();
		this.enLicenceType = enLicenceType;
		if ((szLicenceFile.length != this.szLicenceFile.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szLicenceFile = szLicenceFile;
	}
	public PU_LICENCE_FILE_UPLOAD(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_LICENCE_FILE_UPLOAD implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_LICENCE_FILE_UPLOAD implements Structure.ByValue {
		
	};
}
