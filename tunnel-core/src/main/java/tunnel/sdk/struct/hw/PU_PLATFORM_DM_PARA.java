package tunnel.sdk.struct.hw;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_PLATFORM_DM_PARA extends Structure {
	public boolean bEnable;
	/**
	 * @see PU_SDK_PLATFORM_MODE_E<br>
	 * C type : PU_SDK_PLATFORM_MODE_E
	 */
	public int enSdkPlatformMode;
	/** C type : PU_CONNECT_TYPE_E */
	public int enConnectType;
	/** C type : CHAR[32] */
	public byte[] szDeviceId = new byte[32];
	/** C type : CHAR[16] */
	public byte[] szPlatformIp = new byte[16];
	public NativeLong szPlatformPort;
	/** C type : CHAR[16] */
	public byte[] szBackupPlatformIp = new byte[16];
	public NativeLong szBackupPlatformPort;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public PU_PLATFORM_DM_PARA() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("bEnable", "enSdkPlatformMode", "enConnectType", "szDeviceId", "szPlatformIp", "szPlatformPort", "szBackupPlatformIp", "szBackupPlatformPort", "szReserve");
	}
	/**
	 * @param enSdkPlatformMode @see PU_SDK_PLATFORM_MODE_E<br>
	 * C type : PU_SDK_PLATFORM_MODE_E<br>
	 * @param enConnectType C type : PU_CONNECT_TYPE_E<br>
	 * @param szDeviceId C type : CHAR[32]<br>
	 * @param szPlatformIp C type : CHAR[16]<br>
	 * @param szBackupPlatformIp C type : CHAR[16]<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public PU_PLATFORM_DM_PARA(boolean bEnable, int enSdkPlatformMode, int enConnectType, byte szDeviceId[], byte szPlatformIp[], NativeLong szPlatformPort, byte szBackupPlatformIp[], NativeLong szBackupPlatformPort, byte szReserve[]) {
		super();
		this.bEnable = bEnable;
		this.enSdkPlatformMode = enSdkPlatformMode;
		this.enConnectType = enConnectType;
		if ((szDeviceId.length != this.szDeviceId.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDeviceId = szDeviceId;
		if ((szPlatformIp.length != this.szPlatformIp.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szPlatformIp = szPlatformIp;
		this.szPlatformPort = szPlatformPort;
		if ((szBackupPlatformIp.length != this.szBackupPlatformIp.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szBackupPlatformIp = szBackupPlatformIp;
		this.szBackupPlatformPort = szBackupPlatformPort;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public PU_PLATFORM_DM_PARA(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_PLATFORM_DM_PARA implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_PLATFORM_DM_PARA implements Structure.ByValue {
		
	};
}
