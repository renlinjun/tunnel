package tunnel.sdk.struct.hw;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_START_DECODE_INFO extends Structure {
	/** \u901a\u9053\u53f7 */
	public NativeLong ulChannelId;
	/**
	 * \u89c6\u9891\u89e3\u7801\u7c7b\u578b<br>
	 * C type : PU_ENCODE_TYPE_E
	 */
	public int enVideoEncodeType;
	/**
	 * \u97f3\u9891\u89e3\u7801\u7c7b\u578b<br>
	 * C type : PU_ENCODE_TYPE_E
	 */
	public int enAudioEncodeType;
	/**
	 * \u521d\u59cb\u5316\u89e3\u7801\u4f20\u8f93\u534f\u8bae<br>
	 * C type : PU_PROTOCOL_TYPE_E
	 */
	public int enProtocolType;
	/**
	 * SDK\u7684\u7aef\u53e3\u4fe1\u606f<br>
	 * C type : PU_PORT_INFO_S
	 */
	public PU_PORT_INFO stLocalPortInfo;
	/**
	 * SDK\u7684\u5a92\u4f53IP<br>
	 * C type : CHAR[16]
	 */
	public byte[] szLocalMediaIp = new byte[16];
	/**
	 * \u4f1a\u8bddID<br>
	 * C type : CHAR[32]
	 */
	public byte[] szSessionID = new byte[32];
	/**
	 * \u4f1a\u8bddURL<br>
	 * C type : CHAR[256]
	 */
	public byte[] szSessionUrl = new byte[256];
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public PU_START_DECODE_INFO() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ulChannelId", "enVideoEncodeType", "enAudioEncodeType", "enProtocolType", "stLocalPortInfo", "szLocalMediaIp", "szSessionID", "szSessionUrl", "szReserve");
	}
	/**
	 * @param ulChannelId \u901a\u9053\u53f7<br>
	 * @param enVideoEncodeType \u89c6\u9891\u89e3\u7801\u7c7b\u578b<br>
	 * C type : PU_ENCODE_TYPE_E<br>
	 * @param enAudioEncodeType \u97f3\u9891\u89e3\u7801\u7c7b\u578b<br>
	 * C type : PU_ENCODE_TYPE_E<br>
	 * @param enProtocolType \u521d\u59cb\u5316\u89e3\u7801\u4f20\u8f93\u534f\u8bae<br>
	 * C type : PU_PROTOCOL_TYPE_E<br>
	 * @param stLocalPortInfo SDK\u7684\u7aef\u53e3\u4fe1\u606f<br>
	 * C type : PU_PORT_INFO_S<br>
	 * @param szLocalMediaIp SDK\u7684\u5a92\u4f53IP<br>
	 * C type : CHAR[16]<br>
	 * @param szSessionID \u4f1a\u8bddID<br>
	 * C type : CHAR[32]<br>
	 * @param szSessionUrl \u4f1a\u8bddURL<br>
	 * C type : CHAR[256]<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public PU_START_DECODE_INFO(NativeLong ulChannelId, int enVideoEncodeType, int enAudioEncodeType, int enProtocolType, PU_PORT_INFO stLocalPortInfo, byte szLocalMediaIp[], byte szSessionID[], byte szSessionUrl[], byte szReserve[]) {
		super();
		this.ulChannelId = ulChannelId;
		this.enVideoEncodeType = enVideoEncodeType;
		this.enAudioEncodeType = enAudioEncodeType;
		this.enProtocolType = enProtocolType;
		this.stLocalPortInfo = stLocalPortInfo;
		if ((szLocalMediaIp.length != this.szLocalMediaIp.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szLocalMediaIp = szLocalMediaIp;
		if ((szSessionID.length != this.szSessionID.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSessionID = szSessionID;
		if ((szSessionUrl.length != this.szSessionUrl.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSessionUrl = szSessionUrl;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public PU_START_DECODE_INFO(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_START_DECODE_INFO implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_START_DECODE_INFO implements Structure.ByValue {
		
	};
}
