package tunnel.sdk.struct.hw;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : D:\HWPuSDK.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class PU_TIME_PLAN extends Structure {
	/** \u5468\u671f\u63a7\u5236\uff0c0\uff1a\u4ec5\u4e00\u6b21\uff0c1\uff1a\u6bcf\u5468\u90fd\u6309\u7167\u65f6\u95f4\u6bb5 */
	public NativeLong ulCycle;
	/** \u5468\u671f\uff1a 0:\u4e00\u5468\u5168\u90e8 1~7:\u8868\u793a\u5404\u5929 */
	public NativeLong ulPeriod;
	/**
	 * \u5f00\u59cb\u65f6\u95f4:  UTC \u65f6\u95f4<br>
	 * C type : PU_TIME_S
	 */
	public PU_TIME stStartTime;
	/**
	 * \u7ed3\u675f\u65f6\u95f4:  UTC \u65f6\u95f4<br>
	 * C type : PU_TIME_S
	 */
	public PU_TIME stEndTime;
	/** C type : CHAR[32] */
	public byte[] szReserved = new byte[32];
	public PU_TIME_PLAN() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ulCycle", "ulPeriod", "stStartTime", "stEndTime", "szReserved");
	}
	/**
	 * @param ulCycle \u5468\u671f\u63a7\u5236\uff0c0\uff1a\u4ec5\u4e00\u6b21\uff0c1\uff1a\u6bcf\u5468\u90fd\u6309\u7167\u65f6\u95f4\u6bb5<br>
	 * @param ulPeriod \u5468\u671f\uff1a 0:\u4e00\u5468\u5168\u90e8 1~7:\u8868\u793a\u5404\u5929<br>
	 * @param stStartTime \u5f00\u59cb\u65f6\u95f4:  UTC \u65f6\u95f4<br>
	 * C type : PU_TIME_S<br>
	 * @param stEndTime \u7ed3\u675f\u65f6\u95f4:  UTC \u65f6\u95f4<br>
	 * C type : PU_TIME_S<br>
	 * @param szReserved C type : CHAR[32]
	 */
	public PU_TIME_PLAN(NativeLong ulCycle, NativeLong ulPeriod, PU_TIME stStartTime, PU_TIME stEndTime, byte szReserved[]) {
		super();
		this.ulCycle = ulCycle;
		this.ulPeriod = ulPeriod;
		this.stStartTime = stStartTime;
		this.stEndTime = stEndTime;
		if ((szReserved.length != this.szReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserved = szReserved;
	}
	public PU_TIME_PLAN(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends PU_TIME_PLAN implements Structure.ByReference {
		
	};
	public static class ByValue extends PU_TIME_PLAN implements Structure.ByValue {
		
	};
}
