package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

import static tunnel.sdk.constanst.IMOSDefLibrary.IMOS_DESC_LEN;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagAudioOutput extends Structure {
	/** C type : int */
	public int ulAudioEnabled;
	/** C type : int */
	public int ulEncodeType;
	/** C type : int */
	public int ulTrack;
	/** C type : int */
	public int ulVolume;
	/** C type : CHAR[IMOS_DESC_LEN] */
	public byte[] szDesc = new byte[IMOS_DESC_LEN];
	public TagAudioOutput() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ulAudioEnabled", "ulEncodeType", "ulTrack", "ulVolume", "szDesc");
	}
	/**
	 * @param ulAudioEnabled C type : int<br>
	 * @param ulEncodeType C type : int<br>
	 * @param ulTrack C type : int<br>
	 * @param ulVolume C type : int<br>
	 * @param szDesc C type : CHAR[IMOS_DESC_LEN]
	 */
	public TagAudioOutput(int ulAudioEnabled, int ulEncodeType, int ulTrack, int ulVolume, byte szDesc[]) {
		super();
		this.ulAudioEnabled = ulAudioEnabled;
		this.ulEncodeType = ulEncodeType;
		this.ulTrack = ulTrack;
		this.ulVolume = ulVolume;
		if ((szDesc.length != this.szDesc.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDesc = szDesc;
	}
	public TagAudioOutput(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagAudioOutput implements Structure.ByReference {
		
	};
	public static class ByValue extends TagAudioOutput implements Structure.ByValue {
		
	};
}
