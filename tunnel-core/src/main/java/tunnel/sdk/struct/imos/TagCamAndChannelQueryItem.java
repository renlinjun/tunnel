package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;

import static tunnel.sdk.constanst.IMOSDefLibrary.*;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagCamAndChannelQueryItem extends Structure {
	/** C type : DEV_CHANNEL_INDEX_S */
	public TagDevChannelIndex stECChannelIndex;
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szCamCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCamName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulCamType;
	/** C type : CHAR[IMOS_STRING_LEN_32] */
	public byte[] szPtzProtocol = new byte[IMOS_STRING_LEN_32];
	/** C type : int */
	public int ulPtzAddrCode;
	/** C type : CHAR[IMOS_IPADDR_LEN] */
	public byte[] szMulticastAddr = new byte[IMOS_IPADDR_LEN];
	/** C type : int */
	public int ulMulticastPort;
	/** C type : CHAR[32] */
	public byte[] szReserve = new byte[32];
	public TagCamAndChannelQueryItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("stECChannelIndex", "szCamCode", "szCamName", "ulCamType", "szPtzProtocol", "ulPtzAddrCode", "szMulticastAddr", "ulMulticastPort", "szReserve");
	}
	/**
	 * @param stECChannelIndex C type : DEV_CHANNEL_INDEX_S<br>
	 * @param szCamCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szCamName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulCamType C type : int<br>
	 * @param szPtzProtocol C type : CHAR[IMOS_STRING_LEN_32]<br>
	 * @param ulPtzAddrCode C type : int<br>
	 * @param szMulticastAddr C type : CHAR[IMOS_IPADDR_LEN]<br>
	 * @param ulMulticastPort C type : int<br>
	 * @param szReserve C type : CHAR[32]
	 */
	public TagCamAndChannelQueryItem(TagDevChannelIndex stECChannelIndex, byte szCamCode[], byte szCamName[], int ulCamType, byte szPtzProtocol[], int ulPtzAddrCode, byte szMulticastAddr[], int ulMulticastPort, byte szReserve[]) {
		super();
		this.stECChannelIndex = stECChannelIndex;
		if ((szCamCode.length != this.szCamCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCamCode = szCamCode;
		if ((szCamName.length != this.szCamName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCamName = szCamName;
		this.ulCamType = ulCamType;
		if ((szPtzProtocol.length != this.szPtzProtocol.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szPtzProtocol = szPtzProtocol;
		this.ulPtzAddrCode = ulPtzAddrCode;
		if ((szMulticastAddr.length != this.szMulticastAddr.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szMulticastAddr = szMulticastAddr;
		this.ulMulticastPort = ulMulticastPort;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public TagCamAndChannelQueryItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagCamAndChannelQueryItem implements Structure.ByReference {
		
	};
	public static class ByValue extends TagCamAndChannelQueryItem implements Structure.ByValue {
		
	};
}
