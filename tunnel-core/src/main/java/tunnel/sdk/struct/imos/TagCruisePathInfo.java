package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static tunnel.sdk.constanst.IMOSDefLibrary.*;
import static tunnel.sdk.constanst.SDKDef.IMOS_CRUISE_PATH_PRESET_MAX_COUNT;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagCruisePathInfo extends Structure {
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCamName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szCamCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCruisePathName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulCruisePathItemNum;
	/** C type : CRUISE_PATH_ITEM_S[IMOS_CRUISE_PATH_PRESET_MAX_COUNT] */
	public TagCruisePathItem[] astCruisePathItemList = new TagCruisePathItem[IMOS_CRUISE_PATH_PRESET_MAX_COUNT];
	/** C type : CHAR[8] */
	public byte[] szReserve = new byte[8];
	public TagCruisePathInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szCamName", "szCamCode", "szCruisePathName", "ulCruisePathItemNum", "astCruisePathItemList", "szReserve");
	}
	/**
	 * @param szCamName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szCamCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szCruisePathName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulCruisePathItemNum C type : int<br>
	 * @param astCruisePathItemList C type : CRUISE_PATH_ITEM_S[IMOS_CRUISE_PATH_PRESET_MAX_COUNT]<br>
	 * @param szReserve C type : CHAR[8]
	 */
	public TagCruisePathInfo(byte szCamName[], byte szCamCode[], byte szCruisePathName[], int ulCruisePathItemNum, TagCruisePathItem astCruisePathItemList[], byte szReserve[]) {
		super();
		if ((szCamName.length != this.szCamName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCamName = szCamName;
		if ((szCamCode.length != this.szCamCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCamCode = szCamCode;
		if ((szCruisePathName.length != this.szCruisePathName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCruisePathName = szCruisePathName;
		this.ulCruisePathItemNum = ulCruisePathItemNum;
		if ((astCruisePathItemList.length != this.astCruisePathItemList.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.astCruisePathItemList = astCruisePathItemList;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public TagCruisePathInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagCruisePathInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends TagCruisePathInfo implements Structure.ByValue {
		
	};
}
