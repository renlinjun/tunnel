package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static tunnel.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagCruisePlanQueryItem extends Structure {
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCamName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCruisePlanName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szCruisePlanCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szCreatorName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_TIME_LEN] */
	public byte[] szCreatTime = new byte[IMOS_TIME_LEN];
	/** C type : int */
	public int ulPlanStatus;
	/** C type : CHAR[8] */
	public byte[] szReserve = new byte[8];
	public TagCruisePlanQueryItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szCamName", "szCruisePlanName", "szCruisePlanCode", "szCreatorName", "szCreatTime", "ulPlanStatus", "szReserve");
	}
	/**
	 * @param szCamName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szCruisePlanName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szCruisePlanCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szCreatorName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szCreatTime C type : CHAR[IMOS_TIME_LEN]<br>
	 * @param ulPlanStatus C type : int<br>
	 * @param szReserve C type : CHAR[8]
	 */
	public TagCruisePlanQueryItem(byte szCamName[], byte szCruisePlanName[], byte szCruisePlanCode[], byte szCreatorName[], byte szCreatTime[], int ulPlanStatus, byte szReserve[]) {
		super();
		if ((szCamName.length != this.szCamName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCamName = szCamName;
		if ((szCruisePlanName.length != this.szCruisePlanName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCruisePlanName = szCruisePlanName;
		if ((szCruisePlanCode.length != this.szCruisePlanCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCruisePlanCode = szCruisePlanCode;
		if ((szCreatorName.length != this.szCreatorName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCreatorName = szCreatorName;
		if ((szCreatTime.length != this.szCreatTime.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szCreatTime = szCreatTime;
		this.ulPlanStatus = ulPlanStatus;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public TagCruisePlanQueryItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagCruisePlanQueryItem implements Structure.ByReference {
		
	};
	public static class ByValue extends TagCruisePlanQueryItem implements Structure.ByValue {
		
	};
}
