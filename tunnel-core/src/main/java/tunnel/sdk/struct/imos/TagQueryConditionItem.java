package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;

import static tunnel.sdk.constanst.SDKDef.IMOS_QUERY_DATA_MAX_LEN;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagQueryConditionItem extends Structure {
	/** C type : int */
	public int ulQueryType;
	/** C type : int */
	public int ulLogicFlag;
	/** C type : CHAR[IMOS_QUERY_DATA_MAX_LEN] */
	public byte[] szQueryData = new byte[IMOS_QUERY_DATA_MAX_LEN];
	public TagQueryConditionItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ulQueryType", "ulLogicFlag", "szQueryData");
	}
	/**
	 * @param ulQueryType C type : int<br>
	 * @param ulLogicFlag C type : int<br>
	 * @param szQueryData C type : CHAR[IMOS_QUERY_DATA_MAX_LEN]
	 */
	public TagQueryConditionItem(int ulQueryType, int ulLogicFlag, byte szQueryData[]) {
		super();
		this.ulQueryType = ulQueryType;
		this.ulLogicFlag = ulLogicFlag;
		if ((szQueryData.length != this.szQueryData.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szQueryData = szQueryData;
	}
	public TagQueryConditionItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagQueryConditionItem implements Structure.ByReference {
		
	};
	public static class ByValue extends TagQueryConditionItem implements Structure.ByValue {
		
	};
}
