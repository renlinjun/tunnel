package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static tunnel.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class TagScrAndChannelQueryItem extends Structure {
	/** C type : DEV_CHANNEL_INDEX_S */
	public TagDevChannelIndex stDCChannelIndex;
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szScrCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szScrName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulSplitScrNum;
	/** C type : int */
	public int ulBindStaus;
	/** C type : CHAR[24] */
	public byte[] szReserve = new byte[24];
	public TagScrAndChannelQueryItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("stDCChannelIndex", "szScrCode", "szScrName", "ulSplitScrNum", "ulBindStaus", "szReserve");
	}
	/**
	 * @param stDCChannelIndex C type : DEV_CHANNEL_INDEX_S<br>
	 * @param szScrCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szScrName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulSplitScrNum C type : int<br>
	 * @param ulBindStaus C type : int<br>
	 * @param szReserve C type : CHAR[24]
	 */
	public TagScrAndChannelQueryItem(TagDevChannelIndex stDCChannelIndex, byte szScrCode[], byte szScrName[], int ulSplitScrNum, int ulBindStaus, byte szReserve[]) {
		super();
		this.stDCChannelIndex = stDCChannelIndex;
		if ((szScrCode.length != this.szScrCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szScrCode = szScrCode;
		if ((szScrName.length != this.szScrName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szScrName = szScrName;
		this.ulSplitScrNum = ulSplitScrNum;
		this.ulBindStaus = ulBindStaus;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public TagScrAndChannelQueryItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends TagScrAndChannelQueryItem implements Structure.ByReference {
		
	};
	public static class ByValue extends TagScrAndChannelQueryItem implements Structure.ByValue {
		
	};
}
