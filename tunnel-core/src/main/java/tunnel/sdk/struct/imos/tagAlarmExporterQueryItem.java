package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import tunnel.sdk.constanst.IMOSDefLibrary;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagAlarmExporterQueryItem extends Structure {
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szAlarmExporterName = new byte[IMOSDefLibrary.IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szAlarmExporterCode = new byte[IMOSDefLibrary.IMOS_RES_CODE_LEN];
	/** C type : int */
	public int ulAlarmExporterType;
	/** C type : CHAR[IMOS_DOMAIN_CODE_LEN] */
	public byte[] szOrgCode = new byte[IMOSDefLibrary.IMOS_DOMAIN_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szOrgName = new byte[IMOSDefLibrary.IMOS_NAME_LEN];
	public tagAlarmExporterQueryItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szAlarmExporterName", "szAlarmExporterCode", "ulAlarmExporterType", "szOrgCode", "szOrgName");
	}
	/**
	 * @param szAlarmExporterName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szAlarmExporterCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param ulAlarmExporterType C type : int<br>
	 * @param szOrgCode C type : CHAR[IMOS_DOMAIN_CODE_LEN]<br>
	 * @param szOrgName C type : CHAR[IMOS_NAME_LEN]
	 */
	public tagAlarmExporterQueryItem(byte szAlarmExporterName[], byte szAlarmExporterCode[], int ulAlarmExporterType, byte szOrgCode[], byte szOrgName[]) {
		super();
		if ((szAlarmExporterName.length != this.szAlarmExporterName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szAlarmExporterName = szAlarmExporterName;
		if ((szAlarmExporterCode.length != this.szAlarmExporterCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szAlarmExporterCode = szAlarmExporterCode;
		this.ulAlarmExporterType = ulAlarmExporterType;
		if ((szOrgCode.length != this.szOrgCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szOrgCode = szOrgCode;
		if ((szOrgName.length != this.szOrgName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szOrgName = szOrgName;
	}
	public tagAlarmExporterQueryItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagAlarmExporterQueryItem implements Structure.ByReference {
		
	};
	public static class ByValue extends tagAlarmExporterQueryItem implements Structure.ByValue {
		
	};
}
