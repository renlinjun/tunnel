package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static tunnel.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagSerialRelationItem extends Structure {
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szResCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szResName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulResType;
	public tagSerialRelationItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szResCode", "szResName", "ulResType");
	}
	/**
	 * @param szResCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szResName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulResType C type : int
	 */
	public tagSerialRelationItem(byte szResCode[], byte szResName[], int ulResType) {
		super();
		if ((szResCode.length != this.szResCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szResCode = szResCode;
		if ((szResName.length != this.szResName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szResName = szResName;
		this.ulResType = ulResType;
	}
	public tagSerialRelationItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagSerialRelationItem implements Structure.ByReference {
		
	};
	public static class ByValue extends tagSerialRelationItem implements Structure.ByValue {
		
	};
}
