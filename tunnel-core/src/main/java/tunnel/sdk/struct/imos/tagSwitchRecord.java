package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import tunnel.sdk.constanst.IMOSDefLibrary;

import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagSwitchRecord extends Structure {
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szSwitchResCode = new byte[IMOSDefLibrary.IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szScreenCode = new byte[IMOSDefLibrary.IMOS_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szScreenName = new byte[IMOSDefLibrary.IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szUserCode = new byte[IMOSDefLibrary.IMOS_CODE_LEN];
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szUserLoginCode = new byte[IMOSDefLibrary.IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_IPADDR_LEN] */
	public byte[] szUserAddr = new byte[IMOSDefLibrary.IMOS_IPADDR_LEN];
	/** C type : int */
	public int ulState;
	public tagSwitchRecord() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szSwitchResCode", "szScreenCode", "szScreenName", "szUserCode", "szUserLoginCode", "szUserAddr", "ulState");
	}
	/**
	 * @param szSwitchResCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szScreenCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param szScreenName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szUserCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param szUserLoginCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szUserAddr C type : CHAR[IMOS_IPADDR_LEN]<br>
	 * @param ulState C type : int
	 */
	public tagSwitchRecord(byte szSwitchResCode[], byte szScreenCode[], byte szScreenName[], byte szUserCode[], byte szUserLoginCode[], byte szUserAddr[], int ulState) {
		super();
		if ((szSwitchResCode.length != this.szSwitchResCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSwitchResCode = szSwitchResCode;
		if ((szScreenCode.length != this.szScreenCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szScreenCode = szScreenCode;
		if ((szScreenName.length != this.szScreenName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szScreenName = szScreenName;
		if ((szUserCode.length != this.szUserCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szUserCode = szUserCode;
		if ((szUserLoginCode.length != this.szUserLoginCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szUserLoginCode = szUserLoginCode;
		if ((szUserAddr.length != this.szUserAddr.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szUserAddr = szUserAddr;
		this.ulState = ulState;
	}
	public tagSwitchRecord(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagSwitchRecord implements Structure.ByReference {
		
	};
	public static class ByValue extends tagSwitchRecord implements Structure.ByValue {
		
	};
}
