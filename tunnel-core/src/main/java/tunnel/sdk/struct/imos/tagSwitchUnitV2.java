package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;

/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagSwitchUnitV2 extends Structure {
	/** C type : SWITCH_UNIT_S */
	public tagSwitchUnit stSwitchUnitV1;
	/** C type : int */
	public int ulStreamType;
	/** C type : CHAR[128] */
	public byte[] szReserve = new byte[128];
	public tagSwitchUnitV2() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("stSwitchUnitV1", "ulStreamType", "szReserve");
	}
	/**
	 * @param stSwitchUnitV1 C type : SWITCH_UNIT_S<br>
	 * @param ulStreamType C type : int<br>
	 * @param szReserve C type : CHAR[128]
	 */
	public tagSwitchUnitV2(tagSwitchUnit stSwitchUnitV1, int ulStreamType, byte szReserve[]) {
		super();
		this.stSwitchUnitV1 = stSwitchUnitV1;
		this.ulStreamType = ulStreamType;
		if ((szReserve.length != this.szReserve.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserve = szReserve;
	}
	public tagSwitchUnitV2(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagSwitchUnitV2 implements Structure.ByReference {
		
	};
	public static class ByValue extends tagSwitchUnitV2 implements Structure.ByValue {
		
	};
}
