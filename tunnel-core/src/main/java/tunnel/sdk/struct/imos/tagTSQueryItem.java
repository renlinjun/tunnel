package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static tunnel.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagTSQueryItem extends Structure {
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szTSCode = new byte[IMOS_DEVICE_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szTSName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_DOMAIN_CODE_LEN] */
	public byte[] szOrgCode = new byte[IMOS_DOMAIN_CODE_LEN];
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szOrgName = new byte[IMOS_NAME_LEN];
	/** C type : int */
	public int ulDevaddrtype;
	/** C type : CHAR[IMOS_IPADDR_LEN] */
	public byte[] szDevAddr = new byte[IMOS_IPADDR_LEN];
	/** C type : int */
	public int ulIsOnline;
	/** C type : int */
	public int ulDevExtStatus;
	public tagTSQueryItem() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szTSCode", "szTSName", "szOrgCode", "szOrgName", "ulDevaddrtype", "szDevAddr", "ulIsOnline", "ulDevExtStatus");
	}
	/**
	 * @param szTSCode C type : CHAR[IMOS_DEVICE_CODE_LEN]<br>
	 * @param szTSName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szOrgCode C type : CHAR[IMOS_DOMAIN_CODE_LEN]<br>
	 * @param szOrgName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param ulDevaddrtype C type : int<br>
	 * @param szDevAddr C type : CHAR[IMOS_IPADDR_LEN]<br>
	 * @param ulIsOnline C type : int<br>
	 * @param ulDevExtStatus C type : int
	 */
	public tagTSQueryItem(byte szTSCode[], byte szTSName[], byte szOrgCode[], byte szOrgName[], int ulDevaddrtype, byte szDevAddr[], int ulIsOnline, int ulDevExtStatus) {
		super();
		if ((szTSCode.length != this.szTSCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szTSCode = szTSCode;
		if ((szTSName.length != this.szTSName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szTSName = szTSName;
		if ((szOrgCode.length != this.szOrgCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szOrgCode = szOrgCode;
		if ((szOrgName.length != this.szOrgName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szOrgName = szOrgName;
		this.ulDevaddrtype = ulDevaddrtype;
		if ((szDevAddr.length != this.szDevAddr.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szDevAddr = szDevAddr;
		this.ulIsOnline = ulIsOnline;
		this.ulDevExtStatus = ulDevExtStatus;
	}
	public tagTSQueryItem(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagTSQueryItem implements Structure.ByReference {
		
	};
	public static class ByValue extends tagTSQueryItem implements Structure.ByValue {
		
	};
}
