package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import static tunnel.sdk.constanst.IMOSDefLibrary.*;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagTSRuleQueryInfo extends Structure {
	/** C type : CHAR[IMOS_NAME_LEN] */
	public byte[] szRuleName = new byte[IMOS_NAME_LEN];
	/** C type : CHAR[IMOS_CODE_LEN] */
	public byte[] szRuleCode = new byte[IMOS_CODE_LEN];
	/** C type : int */
	public int bIsEnable;
	/** C type : int */
	public int ulStreamType;
	/** C type : int */
	public int ulTransType;
	/** C type : CHAR[IMOS_STRING_LEN_512] */
	public byte[] szReserved = new byte[IMOS_STRING_LEN_512];
	public tagTSRuleQueryInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szRuleName", "szRuleCode", "bIsEnable", "ulStreamType", "ulTransType", "szReserved");
	}
	/**
	 * @param szRuleName C type : CHAR[IMOS_NAME_LEN]<br>
	 * @param szRuleCode C type : CHAR[IMOS_CODE_LEN]<br>
	 * @param bIsEnable C type : int<br>
	 * @param ulStreamType C type : int<br>
	 * @param ulTransType C type : int<br>
	 * @param szReserved C type : CHAR[IMOS_STRING_LEN_512]
	 */
	public tagTSRuleQueryInfo(byte szRuleName[], byte szRuleCode[], int bIsEnable, int ulStreamType, int ulTransType, byte szReserved[]) {
		super();
		if ((szRuleName.length != this.szRuleName.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szRuleName = szRuleName;
		if ((szRuleCode.length != this.szRuleCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szRuleCode = szRuleCode;
		this.bIsEnable = bIsEnable;
		this.ulStreamType = ulStreamType;
		this.ulTransType = ulTransType;
		if ((szReserved.length != this.szReserved.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szReserved = szReserved;
	}
	public tagTSRuleQueryInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagTSRuleQueryInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends tagTSRuleQueryInfo implements Structure.ByValue {
		
	};
}
