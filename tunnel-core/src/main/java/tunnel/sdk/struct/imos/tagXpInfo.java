package tunnel.sdk.struct.imos;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
import static tunnel.sdk.constanst.IMOSDefLibrary.*;
/**
 * <i>native declaration : sdk_struct.h</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class tagXpInfo extends Structure {
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szXpCode = new byte[IMOS_DEVICE_CODE_LEN];
	/** C type : int */
	public int ulScreenIndex;
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szXpFirstWndCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szVoiceTalkCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : CHAR[IMOS_RES_CODE_LEN] */
	public byte[] szVoiceBroadcastCode = new byte[IMOS_RES_CODE_LEN];
	/** C type : int */
	public int ulSipAddrType;
	/** C type : CHAR[IMOS_IPADDR_LEN] */
	public byte[] szSipIpAddress = new byte[IMOS_IPADDR_LEN];
	/** C type : int */
	public int ulSipPort;
	/** C type : CHAR[IMOS_DEVICE_CODE_LEN] */
	public byte[] szServerCode = new byte[IMOS_DEVICE_CODE_LEN];
	public tagXpInfo() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("szXpCode", "ulScreenIndex", "szXpFirstWndCode", "szVoiceTalkCode", "szVoiceBroadcastCode", "ulSipAddrType", "szSipIpAddress", "ulSipPort", "szServerCode");
	}
	/**
	 * @param szXpCode C type : CHAR[IMOS_DEVICE_CODE_LEN]<br>
	 * @param ulScreenIndex C type : int<br>
	 * @param szXpFirstWndCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szVoiceTalkCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param szVoiceBroadcastCode C type : CHAR[IMOS_RES_CODE_LEN]<br>
	 * @param ulSipAddrType C type : int<br>
	 * @param szSipIpAddress C type : CHAR[IMOS_IPADDR_LEN]<br>
	 * @param ulSipPort C type : int<br>
	 * @param szServerCode C type : CHAR[IMOS_DEVICE_CODE_LEN]
	 */
	public tagXpInfo(byte szXpCode[], int ulScreenIndex, byte szXpFirstWndCode[], byte szVoiceTalkCode[], byte szVoiceBroadcastCode[], int ulSipAddrType, byte szSipIpAddress[], int ulSipPort, byte szServerCode[]) {
		super();
		if ((szXpCode.length != this.szXpCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szXpCode = szXpCode;
		this.ulScreenIndex = ulScreenIndex;
		if ((szXpFirstWndCode.length != this.szXpFirstWndCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szXpFirstWndCode = szXpFirstWndCode;
		if ((szVoiceTalkCode.length != this.szVoiceTalkCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szVoiceTalkCode = szVoiceTalkCode;
		if ((szVoiceBroadcastCode.length != this.szVoiceBroadcastCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szVoiceBroadcastCode = szVoiceBroadcastCode;
		this.ulSipAddrType = ulSipAddrType;
		if ((szSipIpAddress.length != this.szSipIpAddress.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szSipIpAddress = szSipIpAddress;
		this.ulSipPort = ulSipPort;
		if ((szServerCode.length != this.szServerCode.length)) 
			throw new IllegalArgumentException("Wrong array size !");
		this.szServerCode = szServerCode;
	}
	public tagXpInfo(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends tagXpInfo implements Structure.ByReference {
		
	};
	public static class ByValue extends tagXpInfo implements Structure.ByValue {
		
	};
}
